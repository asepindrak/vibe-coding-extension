{
  "name": "Vibe Coding",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "login",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "beeaefdb-7a4a-46dc-b09c-f5573121765a",
      "name": "login",
      "webhookId": "85c0cd1c-a724-48bd-aec0-55d08d687309"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "176b32ab-5005-4302-a649-b2d0c9072784",
              "name": "email",
              "value": "={{ $json.body.email }}",
              "type": "string"
            },
            {
              "id": "5be4efa0-d979-4828-b952-142bfd991479",
              "name": "token",
              "value": "={{ $json.body.token }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        224,
        0
      ],
      "id": "5b251a10-89f4-4723-963c-2272328370c2",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var userId = $('Edit Fields').item.json.email\nvar token = $('Edit Fields').item.json.token\nvar sessionId = token\n\nconst systemMessage = $json.systemMessage\n\nvar data = {\n  userId,\n  token,\n  sessionId,\n  systemMessage\n}\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4112,
        160
      ],
      "id": "2e457cad-9662-47d6-8932-374be76a3015",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "11b612ae-a892-434b-91d7-4158b022f147",
              "name": "userId",
              "value": "={{ $json.userId }}",
              "type": "string"
            },
            {
              "id": "8bce3a28-30eb-4c30-a90e-6525a1357a11",
              "name": "token",
              "value": "={{ $json.token }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5360,
        80
      ],
      "id": "3aadcc8b-6831-43a5-8572-069aa6e41f74",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "176b32ab-5005-4302-a649-b2d0c9072784",
              "name": "userId",
              "value": "={{ $json.query.userId }}",
              "type": "string"
            },
            {
              "id": "7b4a70c6-0552-4bba-bf0b-1a8e119c9663",
              "name": "token",
              "value": "={{ $json.query.token }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        224,
        2240
      ],
      "id": "c5035ded-568d-42f3-87ed-1db88ac03ab9",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "jsCode": "var userId = $input.first().json.userId\nvar sessionId = $input.first().json.token\nvar data = {\n  userId,\n  sessionId\n}\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        2240
      ],
      "id": "6a777639-465d-40be-95c6-0dcd635a6ef4",
      "name": "Code1"
    },
    {
      "parameters": {
        "path": "history",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        2240
      ],
      "id": "43345a49-b1db-47cf-831f-9d0467a276fd",
      "name": "history",
      "webhookId": "6860e42b-4f8d-40e4-98dc-3b46a1303db7"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "message",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        2640
      ],
      "id": "89ad6e0a-1d41-47ec-88e3-abe69d3ad5c5",
      "name": "send message",
      "webhookId": "50c94bd4-9ef1-4dbe-ac03-dda6fd966797"
    },
    {
      "parameters": {
        "jsCode": "var userId = $input.first().json.userId\nvar sessionId = $input.first().json.token\nvar Message = $input.first().json.message\nvar data = {\n  userId,\n  sessionId,\n  Message\n}\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        2640
      ],
      "id": "b8c90638-c2fe-47db-97c1-7a7375caf541",
      "name": "Code2"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var sessionId = $('Edit Fields3').item.json.token;\nvar userId = $('Edit Fields3').item.json.userId;\n\nvar messages = $('Get chat Memory').item.json.messages;\nvar data = { userId, sessionId, messages };\n\n// --- KONVERSI KE FORMAT OPENAI ---\nvar newMessages = [];\nmessages.forEach((item)=>{\n  if(item.system){\n    newMessages.push({ role:\"system\", content: item.system });\n  } \n  if(item.human){\n    newMessages.push({ role:\"user\", content: item.human });\n  }\n  if(item.ai){\n    newMessages.push({ role:\"assistant\", content: item.ai });\n  }\n  if(item.role){ \n    newMessages.push({ role: item.role, content: item.content });\n  }\n});\n\n// Batasi riwayat\nif (newMessages.length > 20) {\n  newMessages = newMessages.slice(-20);\n}\n\nconst systemMessage = $json.systemMessage;\n\n// --- CEK apakah pesan system sudah ada (keyword saja) ---\nconst alreadyExists = newMessages.some(\n  m => m.role === \"system\" && (\n    m.content.includes(\"The following is the user's project workspace\") || \n    m.content.includes(\"You are an AI Assistant\")\n  )\n);\n\nif (systemMessage && !alreadyExists) {\n  newMessages.push({ role: \"system\", content: systemMessage });\n}\n\n// --- FILTER DUPLIKAT SYSTEM MESSAGE ---\nfunction ensureSingleSystemMessage(messages, keyword) {\n  const found = messages.filter(m => m.role === \"system\" && m.content.includes(keyword));\n  if (found.length > 1) {\n    const lastOne = found[found.length - 1];\n    messages = messages.filter(m => !(m.role === \"system\" && m.content.includes(keyword)));\n    messages.push(lastOne);\n  }\n  return messages;\n}\n\nnewMessages = ensureSingleSystemMessage(newMessages, \"The following is the user's project workspace\");\nnewMessages = ensureSingleSystemMessage(newMessages, \"You are an AI Assistant\");\n\n\n\n// Tambah pesan user terakhir\nnewMessages.push({ role: \"user\", content: $('Edit Fields3').item.json.message });\n\ndata.messages = messages;\nvar data = {\n  data,\n  openai: { \n    json: {\n      model: \"gpt-4o-mini\",\n      messages: newMessages,\n      max_tokens: 10000\n    }\n  }\n};\n\nreturn data;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3920,
        2608
      ],
      "id": "954ebf6e-1c8b-4f7b-bdac-24d74f3ae248",
      "name": "Code3"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        784,
        2848
      ],
      "id": "6f5b424b-10a1-49c6-8b6a-1e7e64cc1872",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "mode": "delete",
        "deleteMode": "all"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        352,
        6640
      ],
      "id": "d1c504dc-5a35-409e-98a8-d46caeebe9bf",
      "name": "Chat Memory Manager2"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        352,
        6832
      ],
      "id": "51ba4504-2dcf-4af5-85c5-8a17ae34babe",
      "name": "Simple Memory2"
    },
    {
      "parameters": {
        "jsCode": "var sessionId = \"1756153946396\"\nvar data = {\n  sessionId\n}\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        112,
        6640
      ],
      "id": "b8c97d07-2dba-4720-a815-bd889d71c687",
      "name": "Code4"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -96,
        6640
      ],
      "id": "e31af50c-613c-44bb-a777-97420dbeb165",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        4416,
        304
      ],
      "id": "52a187ec-b547-474d-a0fa-1317c9649a3a",
      "name": "Simple Memory3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.openai.json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4416,
        2464
      ],
      "id": "81e99152-2109-49b7-b80e-6c4148f1752d",
      "name": "OpenAI Chat",
      "credentials": {
        "openAiApi": {
          "id": "3fZqwOF47IelEJ1h",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "68bf801d-5258-442e-bd46-2a3d2036dc11",
              "name": "message",
              "value": "={{ $('OpenAI Chat').item.json.choices[0].message.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5840,
        2464
      ],
      "id": "4ea948f6-b099-43a8-b788-e467f7187048",
      "name": "Edit Fields4"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        752,
        2448
      ],
      "id": "890b0f59-79ea-4500-a549-9de9d6e34745",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        672,
        2240
      ],
      "id": "b48a9b01-d8be-4e31-8b75-dd5079770055",
      "name": "Chat Memory Manager"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        5152,
        2672
      ],
      "id": "87fa391b-5d31-4ebb-a36b-f07df5671d72",
      "name": "Simple Memory4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a91594e7-8476-487d-81f1-1e0f0dba72ee",
              "name": "sessionId",
              "value": "={{ $('Code2').item.json.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4832,
        2464
      ],
      "id": "2baf6860-5fe8-46a5-9c29-107556a8fc20",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        688,
        2640
      ],
      "id": "c2c3aba0-e725-4b0d-92b6-92ce1f7ce6d1",
      "name": "Get chat Memory"
    },
    {
      "parameters": {
        "mode": "insert",
        "messages": {
          "messageValues": [
            {
              "type": "user",
              "message": "={{ $('send message').item.json.body.message }}"
            },
            {
              "type": "ai",
              "message": "={{ $('OpenAI Chat').item.json.choices[0].message.content }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        5264,
        2464
      ],
      "id": "2828a867-27c4-4136-bfe3-093110acc7ba",
      "name": "Save Chat"
    },
    {
      "parameters": {
        "mode": "insert",
        "messages": {
          "messageValues": [
            {
              "message": "={{ $json.systemMessage }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        4384,
        80
      ],
      "id": "afe61ddb-c226-4066-a4d4-9e2437d1d239",
      "name": "Save system message"
    },
    {
      "parameters": {
        "jsCode": "\nvar messages = $input.first().json.messages\n\nif (messages.length > 20) {\n  messages = messages.slice(-20);\n}\n\nvar newMessages = []\nmessages.forEach((item)=>{\n  if(item.system){\n    newMessages.push({\n      role:\"system\",\n      message: item.system\n    })\n  } \n  if(item.human){\n    newMessages.push({\n      role:\"user\",\n      message: item.human\n    })\n  }\n  if(item.ai){\n    newMessages.push({\n      role:\"assistant\",\n      message: item.ai\n    })\n  }\n})\n\n\nvar data = {\n  messages:newMessages\n}\n\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1056,
        2240
      ],
      "id": "37b44117-92d3-4a93-8316-80190d1961df",
      "name": "Code5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "176b32ab-5005-4302-a649-b2d0c9072784",
              "name": "userId",
              "value": "={{ $json.body.userId }}",
              "type": "string"
            },
            {
              "id": "7b4a70c6-0552-4bba-bf0b-1a8e119c9663",
              "name": "token",
              "value": "={{ $json.body.token }}",
              "type": "string"
            },
            {
              "id": "f2a33904-3d9a-4d0e-9e50-ace2e0e14f35",
              "name": "message",
              "value": "={{ $json.body.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        48,
        5328
      ],
      "id": "3600d4d9-7cb5-4ecd-968e-5df6421ec213",
      "name": "Edit Fields6"
    },
    {
      "parameters": {
        "jsCode": "var userId = $('Edit Fields6').first().json.userId\nvar sessionId = $('Edit Fields6').first().json.token\nvar Message = $('Edit Fields6').first().json.message\nvar data = {\n  userId,\n  sessionId,\n  Message\n}\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2992,
        5120
      ],
      "id": "568ca92d-f644-48ea-bbff-097c5a0c0624",
      "name": "Code6"
    },
    {
      "parameters": {
        "jsCode": "var sessionId = $('Code6').first().json.sessionId\nvar userId = $('Code6').first().json.userId\n\nvar dataUser = {\n  userId,\n  sessionId\n}\n\nvar messages = $input.first().json.messages\n\n// --- KONVERSI KE FORMAT OPENAI ---\nvar newMessages = [];\nmessages.forEach((item)=>{\n  if(item.system){\n    newMessages.push({ role:\"system\", content: item.system });\n  } \n  if(item.human){\n    newMessages.push({ role:\"user\", content: item.human });\n  }\n  if(item.ai){\n    newMessages.push({ role:\"assistant\", content: item.ai });\n  }\n  if(item.role){ \n    newMessages.push({ role: item.role, content: item.content });\n  }\n});\n\n// Batasi riwayat\nif (newMessages.length > 20) {\n  newMessages = newMessages.slice(-20);\n}\n\nconst systemMessage = $('System Message2').first().json.systemMessage\n\n// --- CEK apakah pesan system sudah ada (keyword saja) ---\nconst alreadyExists = newMessages.some(\n  m => m.role === \"system\" && (\n    m.content.includes(\"The following is the user's project workspace\") || \n    m.content.includes(\"You are an AI Assistant\")\n  )\n);\n\nif (systemMessage && !alreadyExists) {\n  newMessages.push({ role: \"system\", content: systemMessage });\n}\n\n// --- FILTER DUPLIKAT SYSTEM MESSAGE ---\nfunction ensureSingleSystemMessage(messages, keyword) {\n  const found = messages.filter(m => m.role === \"system\" && m.content.includes(keyword));\n  if (found.length > 1) {\n    const lastOne = found[found.length - 1];\n    messages = messages.filter(m => !(m.role === \"system\" && m.content.includes(keyword)));\n    messages.push(lastOne);\n  }\n  return messages;\n}\n\nnewMessages = ensureSingleSystemMessage(newMessages, \"The following is the user's project workspace\");\nnewMessages = ensureSingleSystemMessage(newMessages, \"You are an AI Assistant\");\n\n\n\nnewMessages.push({\n  role: \"system\",\n  content:\n    \"You are an AI assistant that generates code completions directly after the user's current input. \" +\n    \"Consider the entire file to avoid duplicating existing syntax or adding braces/semicolons already present. \" +\n    \"Do NOT repeat any part of the existing line or cursor prefix. \" +\n    \"Only return the next characters to insert, with no triple backticks, no language tags, and no explanation.\"\n});\n\n\nnewMessages.push({ role: \"user\", content: $('Code6').first().json.Message });\n\nvar data = {\n  data: dataUser,\n  openai: { \n    json: {\n      model: \"gpt-4o-mini\",\n      messages: newMessages,\n      max_tokens: 10000  // misal 100 token (sekitar 70–80 kata)\n    }\n  }\n}\n\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3776,
        5120
      ],
      "id": "78ec7b37-3fcd-4e46-abb2-b8d7063e8bd0",
      "name": "Code7"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.openai.json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4000,
        5120
      ],
      "id": "7eef383c-2abc-43ba-aa1c-980d189f125e",
      "name": "OpenAI Chat1",
      "credentials": {
        "openAiApi": {
          "id": "3fZqwOF47IelEJ1h",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "68bf801d-5258-442e-bd46-2a3d2036dc11",
              "name": "message",
              "value": "={{ $('OpenAI Chat1').item.json.choices[0].message.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4304,
        5120
      ],
      "id": "fabd4f58-477a-4181-9499-d72adc677177",
      "name": "Edit Fields7"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "suggest",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -240,
        5328
      ],
      "id": "65bdc4ef-e644-43ab-957c-6421ce31da02",
      "name": "Code Completions",
      "webhookId": "01fe259e-4cf2-438f-9d99-69ea451e55f7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "schemaContent",
              "value": "import { z } from \"zod\";  export const goatSchema = z.object({   code: z.string({required_error:\"Kode harus diisi\"}),   type_id: z.number().min(1,\"Tipe harus diisi\"),   status_id: z.number().min(1,\"Status harus diisi\"),   category_id: z.number().min(1,\"Kategori harus diisi\"),   gender: z.string({required_error:\"Gender harus diisi\"}),   birth_date: z.coerce.date({     required_error: \"Tanggal lahir harus diisi\",     invalid_type_error: \"Tanggal lahir tidak valid\"   }),   location: z.string({required_error:\"Lokasi harus diisi\"}),   notes: z.string().optional(),   condition_id: z.number().min(1,\"Kondisi harus diisi\"),   image_path: z.any().optional(),   mother_id: z.number().optional(),   father_id: z.number().optional(),   characteristics: z.string().optional(),   breeding_id: z.number().optional(),   room_id: z.number().optional(),   farm_id: z.number().optional(),   is_sale: z.boolean(),   is_sold: z.boolean(), });  export type GoatSchemaType = z.infer<typeof goatSchema>;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        624,
        -464
      ],
      "id": "99d91c8f-3230-4c30-b9de-b6f900ceb7c8",
      "name": "schema"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1072,
        -352
      ],
      "id": "471d7d72-bd96-4bda-a0c7-747bede64fd3",
      "name": "Merge"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1072,
        -64
      ],
      "id": "a559f29d-7220-45ae-ac91-1cd7efd59703",
      "name": "Merge1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "actionContent",
              "value": "import api from \"@/lib/axiosInstance\";  const GoatAction = {   async get(page?: number) {     const response = await api.get(\"/goats\", {       params: { page },     });     return response;   },    async create(formData: any) {     const response = await api.post(\"/goats\", formData);     return response;   },    async detail(goatId: number) {     const response = await api.get(`/goats/${goatId}`);     return response;   },    async update(goatId: number, formData: any) {     const response = await api.put(`/goats/${goatId}`, formData);     return response;   },    async delete(goatId: number) {     const response = await api.delete(`/goats/${goatId}`);     return response;   }, };  export default GoatAction;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        624,
        -256
      ],
      "id": "71fc9895-b850-41a7-acb4-a5ed292568d9",
      "name": "action"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "formContent",
              "value": "import { useState, useEffect } from \"react\"; import { useNavigate, useParams } from \"react-router-dom\"; import ReusableForm from \"@/components/shared/ReusableForm/ReusableForm\"; import ReusableModal from \"@/components/shared/ReusableModal/ReusableModal\"; import { Button } from \"@/components/ui/button\"; import { ArrowLeft } from \"lucide-react\"; import AppLayout from \"@/AppLayout\"; import { goatSchema, type GoatSchemaType } from \"@/validations/goat.schema\"; import GlobalAction from \"@/actions/global.action\"; import GoatAction from \"@/actions/goat.action\"; import { parseDate } from \"@/lib/formatter\"; import { GoatFormInitialValue, type GoatFormInitialValues } from \"@/types/goats\"; import useStore from \"@/store\"; import type { FieldType, FormSection } from \"@/types/form\";  const GoatForm = () => {   const navigate = useNavigate();   const { farmStore } = useStore()   const { id } = useParams();   const isEdit = Boolean(id);   const [isLoading, setIsLoading] = useState({ isGoatByGender: false });   const [isSubmitting, setIsSubmitting] = useState(false);   const [showSuccessModal, setShowSuccessModal] = useState(false);   const [categories, setCategories] = useState([]);   const [conditions, setConditions] = useState([]);   const [farms, setFarms] = useState([]);   const [statuses, setStatuses] = useState([]);   const [types, setTypes] = useState([]);   const [cages, setCages] = useState([]);   const [breedings, setBreedings] = useState([]);   const [existingGoat, setExistingGoat] = useState<GoatFormInitialValues>();   const [maleGoats, setMaleGoats] = useState([]);   const [femaleGoats, setFemaleGoats] = useState([]);   const [initialValues, setInitialValues] = useState<GoatFormInitialValues>(     {       ...GoatFormInitialValue,       location: farmStore.location,       farm_id: farmStore.id     });    useEffect(() => {     fetchCategories()     fetchConditions()     fetchFarms()     fetchStatuses()     fetchTypes()     fetchCages()     fetchBreeding()     fetchGoatByGender()   }, [])    useEffect(() => {     if (id) {       fetchDetail()     }   }, [id])    useEffect(() => {     if (!id && farmStore.id) {       setInitialValues((prev) => ({         ...prev,         location: farmStore.location,         farm_id: farmStore.id,       }))     }      if (existingGoat && femaleGoats.length && maleGoats.length) {       setInitialValues({         code: existingGoat.code || \"\",         type_id: existingGoat.type_id || 0,         status_id: existingGoat.status_id ?? 0,         category_id: existingGoat.category_id ?? 0,         gender: existingGoat.gender ? convertGender(existingGoat.gender) : \"\",         birth_date: existingGoat.birth_date ? parseDate(String(existingGoat.birth_date)) ?? undefined : undefined,         location: existingGoat.location || \"\",         notes: existingGoat.notes || \"\",         condition_id: existingGoat.condition_id ?? 0,         image_path: existingGoat.image_path ? [existingGoat.image_path as any] : [],         mother_id: existingGoat.mother_id || 0,         father_id: existingGoat.father_id || 0,         characteristics: existingGoat.characteristics || \"\",         breeding_id: existingGoat.breeding_id || 0,         room_id: existingGoat.room_id || 0,         farm_id: existingGoat.farm_id || 0,         is_sale: existingGoat.is_sale || false,         is_sold: existingGoat.is_sold || false,       });     }   }, [farmStore.id, id, isLoading.isGoatByGender, existingGoat, femaleGoats.length, maleGoats.length]);     function convertGender(gender: string) {     if (gender.toLocaleUpperCase().trim() === \"BETINA\") return \"female\";     else return \"male\"   }    const fetchGoatByGender = async () => {     setIsLoading({ isGoatByGender: true })     try {       const femaleGoat = await GlobalAction.goatByGender(\"female\")       const maleGoat = await GlobalAction.goatByGender(\"male\")       if (femaleGoat.status === 200 && maleGoat.status === 200) {         const dataMaleGoat = maleGoat.data.data         const mappingMaleGoat = dataMaleGoat.map((item: any) => ({           value: item.id,           label: `${item.code} - ${item.type.type_name}`         }))         const dataFemaleGoat = femaleGoat.data.data         const mappingFemaleGoat = dataFemaleGoat.map((item: any) => ({           value: item.id,           label: `${item.code} - ${item.type.type_name}`         }))         setMaleGoats(mappingMaleGoat)         setFemaleGoats(mappingFemaleGoat)         setIsLoading({ isGoatByGender: false })       }     } catch (error) {       console.error(error);     }   }     const fetchCategories = async () => {     try {       const response = await GlobalAction.category()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.category_name         }))         setCategories(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchDetail = async () => {     try {       const goatId = id ? parseInt(id) : 0       const response = await GoatAction.detail(goatId)       if (response.status === 200) {         const data = response.data.data         setExistingGoat(data)       }     } catch (error) {       console.error(error);     }   }    const fetchConditions = async () => {     try {       const response = await GlobalAction.condition()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.condition_name         }))         setConditions(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchFarms = async () => {     try {       const response = await GlobalAction.farm()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.name         }))         setFarms(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchStatuses = async () => {     try {       const response = await GlobalAction.status()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.status_name         }))         setStatuses(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchTypes = async () => {     try {       const response = await GlobalAction.type()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.type_name         }))         setTypes(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchCages = async () => {     try {       const response = await GlobalAction.cages()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.room_name         }))         setCages(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchBreeding = async () => {     try {       const response = await GlobalAction.breeding()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           ...item,           value: item.id,           label: `Jantan ${item.maleGoat?.code} (${item.maleGoat?.type?.type_name}) - Betina ${item.femaleGoat?.code} (${item.femaleGoat?.type?.type_name}) `         }))         setBreedings(mapping)       }     } catch (error) {       console.error(error);     }   }    const handleSubmit = async (values: any) => {     setIsSubmitting(true);     const result = goatSchema.safeParse(values);     if (result.success) {       try {         const formData = new FormData();         Object.entries(result.data).forEach(([key, value]) => {           if (value !== undefined && value !== null) {             formData.append(key, String(value));           }         });          if (values.image_path && Array.isArray(values.image_path)) {           values.image_path.forEach((file: File) => {             formData.append(\"image\", file);           });           formData.delete(\"image_path\");         }          const response = id ? await GoatAction.update(parseInt(id), formData) : await GoatAction.create(formData)         if (response.status === 201 || response.status === 200) {           setShowSuccessModal(true);         }         console.log(\"Validation successful, data is valid\");       } catch (error) {         console.error(\"Error saving goat:\", error);       }     } else {       console.error(\"Validation failed:\", result.error);     }     setIsSubmitting(false);   };    const handleCancel = () => navigate(\"/goats\");   const handleSuccessConfirm = () => {     setShowSuccessModal(false);     navigate(\"/goats\");   };    const sections: FormSection<GoatSchemaType>[] = [     {       title: \"Informasi Dasar\",       fields: [         { name: \"code\" as keyof GoatSchemaType, label: \"Kode Kambing\", type: \"text\" as const },         {           name: \"type_id\" as keyof GoatSchemaType,           label: \"Tipe\",           type: \"select\" as const,           options: types,         },         {           name: \"status_id\" as keyof GoatSchemaType,           label: \"Status\",           type: \"select\" as const,           options: statuses,         },         {           name: \"category_id\" as keyof GoatSchemaType,           label: \"Kategori\",           type: \"select\" as const,           options: categories,         },         {           name: \"gender\" as keyof GoatSchemaType,           label: \"Jenis Kelamin\",           type: \"select\" as const,           options: [             { value: \"male\", label: \"Jantan\" },             { value: \"female\", label: \"Betina\" },           ],         },         { name: \"birth_date\" as keyof GoatSchemaType, label: \"Tanggal Lahir\", type: \"date\" },       ],     },     {       title: \"Detail & Karakteristik\",       fields: [         { name: \"location\" as keyof GoatSchemaType, label: \"Lokasi\", type: \"text\" as const, disabled: true },         { name: \"notes\" as keyof GoatSchemaType, label: \"Catatan\", type: \"textarea\" as const },         {           name: \"condition_id\" as keyof GoatSchemaType,           label: \"Kondisi\",           type: \"select\" as const,           options: conditions,         },         {           name: \"image_path\" as keyof GoatSchemaType,           label: \"Foto\",           type: \"file\" as const,           accept: \".png,.jpg,.jpeg\",         },         { name: \"characteristics\" as keyof GoatSchemaType, label: \"Ciri Khas\", type: \"textarea\" as const },       ],     },     {       title: \"Relasi & Breeding\",       fields: [         {           name: \"breeding_id\" as keyof GoatSchemaType,           label: \"Breeding\",           type: \"select\" as const,           options: breedings         },         {           name: \"mother_id\" as keyof GoatSchemaType,           label: \"ID Induk Betina\",           type: \"select\" as const,           disabled: true,           options: femaleGoats         },         {           name: \"father_id\" as keyof GoatSchemaType,           label: \"ID Induk Jantan\",           type: \"select\" as const,           disabled: true,           options: maleGoats         },         {           name: \"room_id\" as keyof GoatSchemaType,           label: \"Kandang\",           type: \"select\" as const,           options: cages         },         {           name: \"farm_id\" as keyof GoatSchemaType,           label: \"Farm\",           type: \"select\" as const,           disabled: true,           options: farms         },       ],     },     {       title: \"Status Penjualan\",       fields: [         { name: \"is_sale\" as keyof GoatSchemaType, label: \"Dijual?\", type: \"checkbox\" as const },         { name: \"is_sold\" as keyof GoatSchemaType, label: \"Sudah Terjual?\", type: \"checkbox\" as const },       ],     },   ];     const handleChangeInput = ({     input,   }: {     input: { name: string; value: any };     type: FieldType;   }) => {     const { name, value } = input;      setInitialValues((prev: GoatFormInitialValues) => {       const getField = (sectionIndex: number, fieldIndex: number) =>         sections[sectionIndex]?.fields[fieldIndex]?.name;        const simpleFieldUpdates: Record<string, keyof GoatFormInitialValues> = {         [getField(0, 0)]: 'code',         [getField(0, 1)]: 'type_id',         [getField(0, 2)]: 'status_id',         [getField(0, 3)]: 'category_id',         [getField(0, 4)]: 'gender',         [getField(0, 5)]: 'birth_date',         [getField(1, 0)]: 'location',         [getField(1, 1)]: 'notes',         [getField(1, 2)]: 'condition_id',         [getField(1, 3)]: 'image_path',         [getField(1, 4)]: 'characteristics',         [getField(2, 3)]: 'room_id',         [getField(3, 0)]: 'is_sale',         [getField(3, 1)]: 'is_sold',       };        const targetKey = simpleFieldUpdates[name];       if (targetKey) {         return { ...prev, [targetKey]: value };       }        if (name === getField(2, 0)) {         const breeding: any = breedings.find((b: any) => b.id === Number(value));          return {           ...prev,           breeding_id: value,           mother_id: breeding?.female_id ?? null,           father_id: breeding?.male_id ?? null,         };       }        return prev;     });   };    return (     <AppLayout       breadcrumbItems={         isEdit           ? [             { title: \"Kambing\", href: \"/goats\" },             { title: \"Edit Kambing\" },           ]           : [             { title: \"Kambing\", href: \"/goats\" },             { title: \"Tambahkan Kambing\" },           ]       }     >       <div className=\"space-y-6\">         <div className=\"flex items-center gap-3\">           <Button variant=\"outline\" size=\"icon\" onClick={() => navigate(\"/goats\")}>             <ArrowLeft className=\"h-4 w-4\" />           </Button>           <div>             <h1 className=\"text-3xl font-bold\">               {isEdit ? \"Edit Kambing\" : \"Tambahkan Kambing\"}             </h1>           </div>         </div>          <ReusableForm<GoatSchemaType>           sections={sections}           initialValues={initialValues}           onChangePerInput={handleChangeInput}           onSubmit={handleSubmit}           onCancel={handleCancel}           submitText={isEdit ? \"Perbarui\" : \"Tambah\"}           cancelText=\"Batal\"           loading={isSubmitting}           schema={goatSchema}         />          <ReusableModal           isOpen={showSuccessModal}           title={isEdit ? \"Kambing Diperbarui!\" : \"Kambing Ditambahkan!\"}           description={isEdit ? \"Informasi berhasil diperbarui.\" : \"Data berhasil ditambahkan.\"}           variant=\"success\"           confirmText=\"OK\"           onConfirm={handleSuccessConfirm}         >           <div className=\"text-center py-4\">             <p className=\"text-sm text-muted-foreground\">               Anda akan dialihkan ke daftar kambing.             </p>           </div>         </ReusableModal>       </div>     </AppLayout>   ); };  export default GoatForm;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        624,
        -80
      ],
      "id": "81792c73-15a6-46d0-ad04-26c0721ef398",
      "name": "form"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "listContent",
              "value": "import { useState, useEffect } from \"react\"; import { useNavigate } from \"react-router-dom\"; import ReusableTable from \"@/components/shared/ReusableTable/ReusableTable\"; import ReusableModal from \"@/components/shared/ReusableModal/ReusableModal\"; import ReusableAlert from \"@/components/shared/ReusableAlert/ReusableAlert\"; import { type Goat } from \"@/types/goats\"; import { Button } from \"@/components/ui/button\"; import { Pencil, Trash2, Eye, Plus, Filter, X } from \"lucide-react\"; import type { TableColumn, TableAction } from \"@/types/table\"; import AppLayout from \"@/AppLayout\"; import { Input } from \"@/components/ui/input\"; import { Label } from \"@/components/ui/label\"; import {   Select,   SelectContent,   SelectItem,   SelectTrigger,   SelectValue, } from \"@/components/ui/select\"; import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"; import GoatAction from \"@/actions/goat.action\"; import { calculateAgeInMonths, dateformat } from \"@/lib/formatter\"; import GlobalAction from \"@/actions/global.action\"; import { PaginationInitial, type Pagination } from \"@/types/page\";  const GoatList = () => {   const navigate = useNavigate();   const [goats, setGoats] = useState<Goat[]>([]);   const [femaleGoats, setFemaleGoats] = useState([]);   const [maleGoats, setMaleGoats] = useState([]);   const [paginations, setPaginations] = useState<Pagination>(PaginationInitial);    useEffect(() => {     fetchGoats();     fetchGoatByGender()   }, []);    const fetchGoatByGender = async () => {     try {       const femaleGoat = await GlobalAction.goatByGender(\"female\")       const maleGoat = await GlobalAction.goatByGender(\"male\")       if (femaleGoat.status === 200 && maleGoat.status === 200) {         const dataMaleGoat = maleGoat.data.data         const mappingMaleGoat = dataMaleGoat.map((item: any) => ({           value: item.id,           label: `${item.code} - ${item.type.type_name} - ${item.category.category_name}`         }))         const dataFemaleGoat = femaleGoat.data.data         const mappingFemaleGoat = dataFemaleGoat.map((item: any) => ({           value: item.id,           label: `${item.code} - ${item.type.type_name} - ${item.category.category_name}`         }))         setMaleGoats(mappingMaleGoat)         setFemaleGoats(mappingFemaleGoat)       }     } catch (error) {       console.error(error);     }   }     const fetchGoats = async (page?: number) => {     try {       const response = await GoatAction.get(page);       if (response.status == 200) {         setGoats(response.data.data);         response.data?.pagination && setPaginations(response.data.pagination)       }     } catch (error) {       console.error(error);     }   };    const handleGotoPage = (page: number) => {     fetchGoats(page)   }     // 🔧 State untuk filter   const [filters, setFilters] = useState({     code: \"\",     type: \"\",     status: \"\",     gender: \"\",     minAge: \"\",     maxAge: \"\",   });    // 🔧 State untuk menampilkan filter card   const [showFilter, setShowFilter] = useState(false);    const [deleteModal, setDeleteModal] = useState<{     isOpen: boolean;     goat: Goat | null;   }>({     isOpen: false,     goat: null,   });    // 🔧 Handler untuk mengubah filter   const handleFilterChange = (field: string, value: string) => {     setFilters((prev) => ({       ...prev,       [field]: value,     }));   };    // 🔧 Handler untuk reset filter   const resetFilters = () => {     setFilters({       code: \"\",       type: \"\",       status: \"\",       gender: \"\",       minAge: \"\",       maxAge: \"\",     });   };    const handleEdit = (goat: Goat) => {     navigate(`/goats/${goat.id}/edit`);   };    const handleDelete = (goat: Goat) => {     setDeleteModal({       isOpen: true,       goat: goat,     });   };    const handleDeleteCancel = () => {     setDeleteModal({       isOpen: false,       goat: null,     });   };    const handleView = (goat: Goat) => {     navigate(`/goats/${goat.id}/view`);   };    const handleAddNew = () => {     navigate(\"/goats/new\");   };   const columns: TableColumn<Goat>[] = [     { header: \"Kode\", accessor: (goat: Goat) => goat.code },     {       header: \"Tipe\",       accessor: (goat: Goat) => goat.type.type_name,     },     {       header: \"Status\",       accessor: (goat: Goat) => goat.status.status_name,     },     { header: \"Jenis Kelamin\", accessor: \"gender\" },     {       header: \"Usia (bulan)\",       accessor: (goat: Goat) => calculateAgeInMonths(goat.birth_date),     },     {       header: \"Tanggal lahir\",       accessor: (goat: Goat) => dateformat(goat.birth_date),     },     { header: \"Lokasi\", accessor: \"location\" },   ];    const actions: TableAction<Goat>[] = [     {       label: \"Detail\",       onClick: handleView,       variant: \"outline\",       icon: <Eye className=\"h-4 w-4 mr-2\" />,     },     {       label: \"Edit\",       onClick: handleEdit,       variant: \"default\",       icon: <Pencil className=\"h-4 w-4 mr-2\" />,     },     {       label: \"Hapus\",       onClick: handleDelete,       variant: \"destructive\",       icon: <Trash2 className=\"h-4 w-4 mr-2\" />,     },   ];    // Calculate statistics   const totalGoats = paginations.total_items || goats.length;   const JantanGoats = maleGoats.length;   const BetinaGoats = femaleGoats.length;    const [alertData, setAlertData] = useState<{     type: \"success\" | \"error\";     title: string;     description: string;   } | null>(null);    const handleDeleteConfirm = async () => {     if (!deleteModal.goat) return;      try {       const response = await GoatAction.delete(deleteModal.goat.id);       if (response.status === 200) {         setGoats((prevGoats) =>           prevGoats.filter((goat) => goat.id !== deleteModal.goat?.id)         );         setDeleteModal({ isOpen: false, goat: null });         setAlertData({           type: \"success\",           title: \"Berhasil\",           description: \"Kambing berhasil dihapus.\",         });       }     } catch (error) {       console.error(\"Failed to delete goat:\", error);       setAlertData({         type: \"error\",         title: \"Gagal\",         description: \"Terjadi kesalahan saat menghapus kambing.\",       });     }   };    return (     <AppLayout       breadcrumbItems={[         { title: \"Kambing\", href: \"/goats\" },         { title: \"Manajemen Kambing\" },       ]}     >       <div className=\"space-y-6\">         <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4\">           <div>             <h1 className=\"text-3xl font-bold\">Manajemen Kambing</h1>             <p className=\"text-muted-foreground\">               Kelola inventaris dan informasi kambing Anda             </p>           </div>           <div className=\"flex gap-2\">             <Button               variant={showFilter ? \"default\" : \"outline\"}               onClick={() => setShowFilter(!showFilter)}             >               <Filter className=\"h-4 w-4 mr-2\" />               {showFilter ? \"Tutup Pencarian\" : \"Cari\"}             </Button>             <Button onClick={handleAddNew}>               <Plus className=\"h-4 w-4 mr-2\" />               Tambah Data Kambing             </Button>           </div>         </div>          {/* 🔧 Filter Card */}         {showFilter && (           <Card>             <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">               <CardTitle>Filter Goats</CardTitle>               <Button                 variant=\"ghost\"                 size=\"icon\"                 onClick={() => setShowFilter(false)}                 className=\"h-6 w-6 p-0\"               >                 <X className=\"h-4 w-4\" />               </Button>             </CardHeader>             <CardContent className=\"space-y-4\">               <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4\">                 <div className=\"space-y-2\">                   <Label>Kode Kambing</Label>                   <Input                     value={filters.code}                     onChange={(e) => handleFilterChange(\"code\", e.target.value)}                     placeholder=\"Cari berdasarkan kode\"                   />                 </div>                  <div className=\"space-y-2\">                   <Label>Tipe</Label>                   <Select                     value={filters.type || undefined}                     onValueChange={(value) =>                       handleFilterChange(                         \"type\",                         value === \"__semua__\" ? \"\" : value                       )                     }                   >                     <SelectTrigger>                       <SelectValue placeholder=\"Pilih tipe\" />                     </SelectTrigger>                     <SelectContent>                       <SelectItem value=\"__semua__\">Semua Tipe</SelectItem>                       <SelectItem value=\"boer\">Boer</SelectItem>                       <SelectItem value=\"local\">Local</SelectItem>                       <SelectItem value=\"cross\">Cross Breed</SelectItem>                     </SelectContent>                   </Select>                 </div>                  <div className=\"space-y-2\">                   <Label>Status</Label>                   <Select                     value={filters.status || undefined}                     onValueChange={(value) =>                       handleFilterChange(                         \"status\",                         value === \"__semua__\" ? \"\" : value                       )                     }                   >                     <SelectTrigger>                       <SelectValue placeholder=\"Pilih status\" />                     </SelectTrigger>                     <SelectContent>                       <SelectItem value=\"__semua__\">All Status</SelectItem>                       <SelectItem value=\"aktif\">Aktif</SelectItem>                       <SelectItem value=\"pembiakan\">Pembiakan</SelectItem>                       <SelectItem value=\"terjual\">Terjual</SelectItem>                       <SelectItem value=\"sakit\">Sakit</SelectItem>                     </SelectContent>                   </Select>                 </div>                  <div className=\"space-y-2\">                   <Label>Gender</Label>                   <Select                     value={filters.gender || undefined}                     onValueChange={(value) =>                       handleFilterChange(                         \"gender\",                         value === \"__semua__\" ? \"\" : value                       )                     }                   >                     <SelectTrigger>                       <SelectValue placeholder=\"Pilih jenis kelamin\" />                     </SelectTrigger>                     <SelectContent>                       <SelectItem value=\"__semua__\">                         All Jenis Kelamin                       </SelectItem>                       <SelectItem value=\"Jantan\">Jantan</SelectItem>                       <SelectItem value=\"Betina\">Betina</SelectItem>                     </SelectContent>                   </Select>                 </div>                  <div className=\"space-y-2\">                   <Label>Usia Minimum (bulan)</Label>                   <Input                     type=\"number\"                     placeholder=\"0\"                     value={filters.minAge}                     onChange={(e) =>                       handleFilterChange(\"minAge\", e.target.value)                     }                   />                 </div>                  <div className=\"space-y-2\">                   <Label>Usia Maksimal (months)</Label>                   <Input                     type=\"number\"                     placeholder=\"100\"                     value={filters.maxAge}                     onChange={(e) =>                       handleFilterChange(\"maxAge\", e.target.value)                     }                   />                 </div>               </div>                <div className=\"flex justify-end gap-2\">                 <Button variant=\"outline\" onClick={resetFilters}>                   Atur Ulang                 </Button>               </div>             </CardContent>           </Card>         )}          {/* Statistics Cards */}         <div className=\"grid gap-4 md:grid-cols-3\">           <Card>             <CardHeader className=\"pb-2\">               <CardTitle className=\"text-sm font-medium\">                 Total Kambing               </CardTitle>             </CardHeader>             <CardContent>               <div className=\"text-2xl font-bold\">{totalGoats}</div>               <p className=\"text-xs text-muted-foreground\">Dalam inventaris</p>             </CardContent>           </Card>           <Card>             <CardHeader className=\"pb-2\">               <CardTitle className=\"text-sm font-medium\">                 Kambing Jantan               </CardTitle>             </CardHeader>             <CardContent>               <div className=\"text-2xl font-bold\">{JantanGoats}</div>               <p className=\"text-xs text-muted-foreground\">Ekor</p>             </CardContent>           </Card>           <Card>             <CardHeader className=\"pb-2\">               <CardTitle className=\"text-sm font-medium\">                 Kambing Betina               </CardTitle>             </CardHeader>             <CardContent>               <div className=\"text-2xl font-bold\">{BetinaGoats}</div>               <p className=\"text-xs text-muted-foreground\">Ekor</p>             </CardContent>           </Card>         </div>          <ReusableTable           data={goats}           columns={columns}           actions={actions}           pagination={paginations}           onClickGoToPage={handleGotoPage}           emptyState={             <div className=\"text-center py-12\">               <h3 className=\"text-lg font-medium mb-2\">                 Tidak ada kambing ditemukan               </h3>               {/* <p className=\"text-muted-foreground mb-4\">                 {filteredGoats.length === 0 && goats.length > 0                   ? \"Tidak ada kambing yang sesuai dengan kriteria pencarian Anda\"                   : \"Mulailah dengan menambahkan kambing pertama Anda\"}               </p> */}               <Button onClick={handleAddNew}>                 <Plus className=\"h-4 w-4 mr-2\" />                 Tambah Kambing Pertama               </Button>             </div>           }         />          {/* Delete Confirmation Modal */}         <ReusableModal           isOpen={deleteModal.isOpen}           title=\"Hapus Kambing\"           description={`Apakah Anda yakin ingin menghapus kambing ${deleteModal.goat?.code}? Tindakan ini tidak dapat dibatalkan.`}           variant=\"delete\"           confirmText=\"Hapus\"           cancelText=\"Batal\"           onConfirm={handleDeleteConfirm}           onCancel={handleDeleteCancel}         >           <div className=\"text-sm text-muted-foreground\">             <p>Ini akan menghapus kambing secara permanen dari sistem Anda.</p>           </div>         </ReusableModal>          {alertData && (           <ReusableAlert             type={alertData.type}             title={alertData.title}             description={alertData.description}             onClose={() => setAlertData(null)}           />         )}       </div>     </AppLayout>   ); };  export default GoatList;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        624,
        96
      ],
      "id": "b485a69d-5168-48b7-8b31-2769646666b4",
      "name": "list"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "detailContent",
              "value": "\"use client\"  import { useNavigate, useParams } from \"react-router-dom\" import { Button } from \"@/components/ui/button\" import { ArrowLeft, Pencil, ZoomIn } from \"lucide-react\" import type { Goat } from \"@/types/goats\" import AppLayout from \"@/AppLayout\" import { useEffect, useState } from \"react\" import GoatAction from \"@/actions/goat.action\" import { dateformat } from \"@/lib/formatter\"  const GoatDetailView = () => {   const navigate = useNavigate()   const { id } = useParams()   const [goat, setGoat] = useState<Goat>()   const [selectedPhoto, setSelectedPhoto] = useState<string | null>(null)    useEffect(() => {     fetchDetail()   }, [])    const fetchDetail = async () => {     try {       const goatId = id ? Number.parseInt(id) : 0       const response = await GoatAction.detail(goatId)       if (response.status === 200) {         const data = response.data.data         setGoat(data)       }     } catch (error) {       console.error(error)     }   }    if (!goat) {     return (       <AppLayout breadcrumbItems={[{ title: \"Goats\", href: \"/goats\" }, { title: \"Detail Kambing\" }]}>         <div className=\"space-y-6\">           <div className=\"flex items-center gap-3\">             <Button variant=\"outline\" size=\"icon\" onClick={() => navigate(\"/goats\")}>               <ArrowLeft className=\"h-4 w-4\" />             </Button>             <h1 className=\"text-3xl font-bold\">Detail Kambing</h1>           </div>           <p className=\"text-muted-foreground\">Kambing yang Anda cari tidak ada.</p>         </div>       </AppLayout>     )   }    const handleEdit = () => {     navigate(`/goats/${goat.id}/edit`)   }    return (     <AppLayout breadcrumbItems={[{ title: \"Goats\", href: \"/goats\" }, { title: \"Detail Kambing\" }]}>       <div className=\"space-y-6\">         <div className=\"flex items-center justify-between\">           <div className=\"flex items-center gap-3\">             <Button variant=\"outline\" size=\"icon\" onClick={() => navigate(\"/goats\")}>               <ArrowLeft className=\"h-4 w-4\" />             </Button>             <div>               <h1 className=\"text-3xl font-bold\">Detail Kambing</h1>               <p className=\"text-muted-foreground\">Lihat informasi kambing</p>             </div>           </div>           <Button onClick={handleEdit}>             <Pencil className=\"h-4 w-4 mr-2\" />             Edit Kambing           </Button>         </div>                  <div className=\"grid gap-6 md:grid-cols-2\">           <div className=\"rounded-lg border p-6\">             <h2 className=\"text-xl font-semibold mb-4\">Galeri Foto</h2>             <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">                 <div                   className=\"group relative aspect-[4/3] overflow-hidden rounded-lg border bg-muted cursor-pointer transition-all hover:shadow-md\"                   onClick={() => setSelectedPhoto(goat.image_path)}                 >                   <img                     src={goat.image_path || \"/placeholder.svg\"}                     className=\"h-full w-full object-cover transition-transform group-hover:scale-105\"                   />                   <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors flex items-center justify-center\">                     <ZoomIn className=\"h-6 w-6 text-white opacity-0 group-hover:opacity-100 transition-opacity\" />                   </div>                 </div>             </div>           </div>           <div className=\"space-y-6\">             <div className=\"rounded-lg border p-6\">               <h2 className=\"text-xl font-semibold mb-4\">Informasi Dasar</h2>               <div className=\"space-y-4\">                 <div className=\"flex justify-between\">                   <span className=\"text-muted-foreground\">Kode</span>                   <span className=\"font-medium\">{goat.code}</span>                 </div>                 <div className=\"flex justify-between\">                   <span className=\"text-muted-foreground\">Jenis</span>                   <span className=\"font-medium\">{goat.type?.type_name}</span>                 </div>                 <div className=\"flex justify-between\">                   <span className=\"text-muted-foreground\">Jenis Kelamin</span>                   <span className=\"font-medium\">{goat.gender}</span>                 </div>                 <div className=\"flex justify-between\">                   <span className=\"text-muted-foreground\">Tanggal Lahir</span>                   <span className=\"font-medium\">{dateformat(goat.birth_date)}</span>                 </div>               </div>             </div>           </div>         </div>            <div className=\"rounded-lg border p-6\">             <h2 className=\"text-xl font-semibold mb-4\">Informasi Status</h2>             <div className=\"space-y-4\">               <div className=\"flex justify-between\">                 <span className=\"text-muted-foreground\">Status</span>                 <span className=\"font-medium\">{goat.status?.status_name}</span>               </div>               <div className=\"flex justify-between\">                 <span className=\"text-muted-foreground\">Lokasi</span>                 <span className=\"font-medium\">{goat.location}</span>               </div>             </div>           </div>           <div className=\"space-y-6\">             <div className=\"rounded-lg border p-6\">               <h2 className=\"text-xl font-semibold mb-4\">Informasi Tambahan</h2>               <div className=\"space-y-4\">                 <div>                   <span className=\"text-muted-foreground\">Catatan:</span>                   <p className=\"font-medium mt-1\">{goat.notes || \"Tidak ada catatan tersedia\"}</p>                 </div>                 <div className=\"flex justify-between\">                   <span className=\"text-muted-foreground\">Dibuat</span>                   <span className=\"font-medium\">{dateformat(goat.created_at)}</span>                 </div>                 <div className=\"flex justify-between\">                   <span className=\"text-muted-foreground\">Terakhir Diperbarui</span>                   <span className=\"font-medium\">{dateformat(goat.updated_at)}</span>                 </div>               </div>             </div>           </div>                  {selectedPhoto && (           <div             className=\"fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4\"             onClick={() => setSelectedPhoto(null)}           >             <div className=\"relative max-w-4xl max-h-full\">               <img                 src={selectedPhoto || \"/placeholder.svg\"}                 alt=\"Foto kambing diperbesar\"                 className=\"max-w-full max-h-full object-contain rounded-lg\"               />               <Button                 variant=\"outline\"                 size=\"icon\"                 className=\"absolute top-4 right-4 bg-white/90 hover:bg-white\"                 onClick={() => setSelectedPhoto(null)}               >                 <ArrowLeft className=\"h-4 w-4 rotate-45\" />               </Button>             </div>           </div>         )}       </div>     </AppLayout>   ) }  export default GoatDetailView",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        624,
        288
      ],
      "id": "9e20a1ce-adda-42ba-9a54-ab505f238393",
      "name": "detail"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1056,
        304
      ],
      "id": "8b3afa5b-ebf1-4972-8206-18387bb1595e",
      "name": "Merge2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1360,
        288
      ],
      "id": "b5d4d2f4-c5db-43e7-94bd-49a2129cb884",
      "name": "Merge3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "typeContent",
              "value": "export interface Goat {   id: number;   code: string;   type: {     id: number;     type_name: string;   };   status: {     id: number;     status_name: string;   };   category: {     id: number;     category_name: string;   };   gender: string;   birth_date: string;   location: string;   notes: string;   image_path: string;   condition: {     id: number;     condition_name: string;   };   room: {     id: number;     room_name: string;   };   created_at: string;   updated_at: string; }   export type GoatFormInitialValues = {   code: string;   type_id: number;   status_id: number;   category_id: number;   gender: string;   birth_date: Date | undefined;   location: string;   notes: string;   condition_id: number;   image_path: File[] | undefined; // Updated to File array   mother_id: number;   father_id: number;   characteristics: string;   breeding_id: number;   room_id: number;   farm_id: number;   is_sale: boolean;   is_sold: boolean; };  export const GoatFormInitialValue: GoatFormInitialValues = {   code: \"\",   type_id: 0,   status_id: 0,   category_id: 0,   gender: \"\",   birth_date: undefined,   location: \"\",   notes: \"\",   condition_id: 0,   image_path: [],   mother_id: 0,   father_id: 0,   characteristics: \"\",   breeding_id: 0,   room_id: 0,   farm_id: 0,   is_sale: false,   is_sold: false, };",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        624,
        496
      ],
      "id": "113dffc0-bccc-4bd9-a2e2-a2da1176f161",
      "name": "type1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1056,
        528
      ],
      "id": "faca0e54-a7f7-4b2b-8c68-79e04ec3ee6f",
      "name": "Merge Type"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "ReuseblaFormContent",
              "value": "import { Formik, Form, Field, type FormikValues } from \"formik\"; import { toFormikValidationSchema } from \"zod-formik-adapter\"; import { Input } from \"@/components/ui/input\"; import { Textarea } from \"@/components/ui/textarea\"; import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from \"@/components/ui/select\"; import type { ChangeEvent } from \"react\"; import { useEffect, useState } from \"react\"; import ImagePreview from \"./ImagePreview\"; import { asFileArray, asStringArray, convertCommaToDot } from \"@/lib/utils\"; import { MultiSelect } from \"@/components/ui/multi-select\"; import { type ReusableFormProps } from \"@/types/form\";  import { InputDate } from \"../InputDate\";  export default function ReusableForm<T extends FormikValues>({   initialValues,   sections,   schema,   onSubmit,   onCancel,   onChangePerInput,   submitText,   cancelText,   loading,   className,   errors: externalErrors, }: ReusableFormProps<T>) {   const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);   // Cleanup function untuk URL.createObjectURL   const cleanupObjectURLs = (files: File[]) => {     files.forEach(file => {       if (file.type.startsWith('image/')) {         URL.revokeObjectURL(URL.createObjectURL(file));       }     });   };    // Cleanup effect saat komponen unmount   useEffect(() => {     return () => {       // Cleanup semua object URLs saat komponen unmount       sections.forEach(section => {         section.fields.forEach(field => {           if (field.type === 'file' || field.type === 'file-multiple') {             const fieldValue = initialValues[field.name];             if (fieldValue && Array.isArray(fieldValue)) {               cleanupObjectURLs(fieldValue);             }           }         });       });     };   }, []);    return (     <Formik<T>       initialValues={initialValues as T}       enableReinitialize={true}       validationSchema={schema ? toFormikValidationSchema(schema) : undefined}       onSubmit={onSubmit}     >       {({ errors: formikErrors, touched, values, handleChange, isSubmitting, setFieldValue }) => {         const handleChangeInput = (item: ChangeEvent, type:string) => {           const target = (item as any).target;                      // Convert comma to dot for number fields           if (type === 'number' && target.value) {             target.value = convertCommaToDot(target.value);           }                      onChangePerInput && onChangePerInput({input: target, type});           handleChange(item as any);         };          const handleFileChange = (fieldName: string, files: File[]) => {           // Cleanup previous object URLs if any           const newFiles = Array.from(files);           setUploadedFiles(newFiles); // Replace current files           setFieldValue(fieldName, newFiles); // Update Formik           onChangePerInput?.({             input: { name: fieldName, value: newFiles },             type: 'file',           });         };         return (         <Form className={`space-y-6 ${className ?? \"\"}`}>           {sections?.map((section, idx) => (             <div key={idx} className=\"space-y-4\">               {section.title && <h3 className=\"font-semibold text-lg\">{section.title}</h3>}               {section.fields?.map((field) => {                 const error =                   touched[field.name as string] &&                   (formikErrors[field.name as string] as string);                 const externalError = externalErrors?.[field.name as string];                 const finalError = externalError || (error as string | undefined);                  switch (field.type) {                   case \"text\":                   case \"number\":                   case \"password\":                     return (                       <div key={String(field.name)} className=\"space-y-1\">                         <label className=\"block text-sm font-medium\">                           {field.label}                         </label>                         <Input                           type={field.type}                           name={String(field.name)}                           value={field.type === 'number' ? convertCommaToDot(values[String(field.name)]) : values[String(field.name)]}                           onChange={(e) => handleChangeInput(e as any, field.type)}                           placeholder={field.placeholder}                           disabled={field.disabled}                           className={field.className}                         />                         {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                       </div>                     );                    case \"date\":                     return(                       <div key={String(field.name)} className=\"space-y-1\">                         <label className=\"block text-sm font-medium\">                           {field.label}                         </label>                         <InputDate                            name={String(field.name)}                            value={values[String(field.name)]}                            disabled={field.disabled}                            className={field.className}                           onChangePerInput={onChangePerInput}                         />                         {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                       </div>                     )                    case \"file\":                   case \"file-multiple\":                     return (                       <div key={String(field.name)} className=\"space-y-1\">                         <label className=\"block text-sm font-medium\">                           {field.label}                         </label>                         <Input                           type=\"file\"                           name={String(field.name)}                           accept={field.accept}                           multiple={field.type === \"file-multiple\" || field.multiple}                           onChange={(e) => {                             const target = e.target as HTMLInputElement;                             const files = target.files;                             if (files) {                               const fileArray = Array.from(files);                               handleFileChange(String(field.name), fileArray);                             }                           }}                           placeholder={field.placeholder}                           disabled={field.disabled}                           className={field.className}                         />                         {Array.isArray(values[String(field.name)]) && values[String(field.name)].length > 0 && (                           <div className=\"text-sm text-muted-foreground\">                             {values[String(field.name)].length} file(s) selected                           </div>                         )}                                                  {/* Image Preview Section */}                         <ImagePreview                           images={[                             ...asFileArray(values[field.name]),                             ...asStringArray(initialValues[field.name])                           ]}                           onRemove={(index) => {                             const totalInitialUrls = asStringArray(initialValues[field.name]).length;                                  if (index < totalInitialUrls) {                               console.log(\"Mark remote image for deletion:\", asStringArray(initialValues[field.name])[index]);                             } else {                               const fileIndex = index - totalInitialUrls;                               const newFiles = uploadedFiles.filter((_, i) => i !== fileIndex);                               setUploadedFiles(newFiles);                               setFieldValue(String(field.name), newFiles);                             }                           }}                         />                                                                          {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                       </div>                     );                    case \"textarea\":                     return (                       <div key={String(field.name)} className=\"space-y-1\">                         <label className=\"block text-sm font-medium\">                           {field.label}                         </label>                         <Textarea                           name={field.name as string}                           value={values[String(field.name)]}                           onChange={(e) => handleChangeInput(e as any, field.type)}                           placeholder={field.placeholder}                           disabled={field.disabled}                           className={field.className}                         />                         {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                       </div>                     );                    case \"select\":                     return (                       <div key={String(field.name)} className=\"space-y-1\">                         <label className=\"block text-sm font-medium\">                           {field.label}                         </label>                         <Select                           disabled={field.disabled}                           value={String(values[String(field.name)])}                           onValueChange={(val) => {                             let parsed: string | number = val;                             if (!isNaN(Number(val)) && val.trim() !== \"\") {                               parsed = parseInt(val, 10);                             }                             const syntheticEvent = {                               target: { name: field.name, value: parsed }                             };                             handleChangeInput(syntheticEvent as any, field.type);                           }}                         >                           <SelectTrigger>                             <SelectValue placeholder={field.placeholder || \"Select\"} />                           </SelectTrigger>                           <SelectContent>                             {field.options?.map((opt) => (                               <SelectItem                                 key={String(opt.value)}                                 value={String(opt.value)}                               >                                 {opt.label}                               </SelectItem>                             ))}                           </SelectContent>                         </Select>                         {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                       </div>                     );                    case \"select-multiple\":                     return (                       <div key={String(field.name)} className=\"space-y-1\">                         <label className=\"block text-sm font-medium\">{field.label}</label>                         <MultiSelect                           options={field.options as { label: string; value: string }[]}                           selected={values[String(field.name)] || []}                           onChange={(selected) => {                             setFieldValue(String(field.name), selected)                           }}                           disabled={field.disabled}                           placeholder={field.placeholder || \"Pilih...\"}                         />                         {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                       </div>                     )                      case \"input-group\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           {field.label && (                             <label className=\"block text-sm font-medium\">{field.label}</label>                           )}                           <div className=\"flex gap-2\">                             {field.inputGroup?.map((opt) => (                               <div key={String(opt.name)} className=\"flex flex-col\">                                 <Input                                   type={opt.type}                                   name={String(opt.name)}                                   value={values[String(opt.name)] ?? \"\"}                                   onChange={(e) => handleChangeInput(e as any, opt.type)}                                   placeholder={opt.placeholder}                                   disabled={opt.disabled}                                   className={opt.className}                                 />                               </div>                             ))}                           </div>                         </div>                       );                   case \"checkbox\":                     return (                       <div key={String(field.name)} className=\"flex items-center gap-2\">                         <Field                           type=\"checkbox\"                           name={field.name as string}                           checked={values[String(field.name)] as unknown as boolean}                         />                         <label>{field.label}</label>                         {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                       </div>                     );                    default:                     return null;                 }               })}             </div>           ))}           {externalErrors?.submit && (             <p className=\"text-sm text-destructive\">{externalErrors.submit}</p>           )}           <div className=\"flex items-center gap-2\">             <button               type=\"submit\"               className=\"bg-primary cursor-pointer text-white px-4 py-2 rounded-md\"               disabled={loading || isSubmitting}             >               {isSubmitting || loading ? \"Saving...\" : (submitText ?? \"Save\")}             </button>             {onCancel && (               <button                 type=\"button\"                 className=\"px-4 py-2 cursor-pointer rounded-md border\"                 onClick={onCancel}                 disabled={loading || isSubmitting}               >                 {cancelText ?? \"Cancel\"}               </button>             )}           </div>         </Form>         );       }}     </Formik>   ); }",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        624,
        720
      ],
      "id": "e7d781fc-4711-4598-9772-b3f61bbaee4f",
      "name": "Reusable Form"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "reusableTableContent",
              "value": "// src/components/shared/ReusableTable/ReusableTable.tsx import {   Table,   TableBody,   TableCell,   TableHead,   TableHeader,   TableRow, } from \"@/components/ui/table\"; import { Button } from \"@/components/ui/button\"; import { Card, CardContent, CardHeader } from \"@/components/ui/card\"; // --- Impor Pagination Components --- import {   Pagination,   PaginationContent,   PaginationEllipsis,   PaginationItem,   PaginationLink,   PaginationNext,   PaginationPrevious, } from \"@/components/ui/pagination\"; import type {   TableColumn,   TableAction,   ReusableTableProps, } from \"@/types/table\"; import { useState, useEffect } from \"react\"; // Tambahkan useState dan useEffect import { PaginationInitial } from \"@/types/page\";  const ReusableTable = <T extends { id: number }>({   data,   columns,   actions = [],   loading = false,   onRowClick,   emptyState,   className = \"\",   onClickGoToPage,   pagination = PaginationInitial,   itemsPerPage = 10, // --- Prop baru untuk jumlah item per halaman --- }: ReusableTableProps<T> & { itemsPerPage?: number }) => {   // --- Extend props type ---   // --- State untuk pagination ---   const [currentPage, setCurrentPage] = useState(pagination.page);    const totalPages = pagination.total_pages;   useEffect(() => {     if (currentPage > totalPages && totalPages > 0) {       setCurrentPage(totalPages);     } else if (totalPages === 0) {       setCurrentPage(1); // Reset ke halaman 1 jika tidak ada data     }   }, [data.length, totalPages, currentPage]);    // --- Hitung data untuk halaman saat ini ---   const startIndex = (currentPage - 1) * itemsPerPage;    // --- Handler untuk perubahan halaman ---   const goToPage = (page: number) => {     // Validasi input halaman     const newPage = Math.max(1, Math.min(page, totalPages));     if (newPage !== currentPage) {       onClickGoToPage && onClickGoToPage(newPage)       setCurrentPage(newPage);     }   };    // --- Handler untuk halaman berikutnya/sebelumnya ---   const nextPage = () => {     goToPage(currentPage + 1)   };   const prevPage = () => {     goToPage(currentPage - 1)   };    // --- Render skeleton loading ---   if (loading) {     return (       <Card className={className}>         <CardHeader>           <div className=\"h-6 bg-gray-200 rounded animate-pulse w-1/4\"></div>         </CardHeader>         <CardContent>           {[1, 2, 3].map((i) => (             <div               key={i}               className=\"h-12 bg-gray-100 rounded mb-2 animate-pulse\"             ></div>           ))}           {/* --- Skeleton untuk Pagination --- */}           <div className=\"flex items-center justify-between px-2 py-4\">             <div className=\"h-4 bg-gray-200 rounded w-32 animate-pulse\"></div>             <div className=\"flex space-x-2\">               {[1, 2, 3, 4].map((i) => (                 <div                   key={i}                   className=\"h-8 w-8 bg-gray-200 rounded animate-pulse\"                 ></div>               ))}             </div>             <div className=\"h-4 bg-gray-200 rounded w-32 animate-pulse\"></div>           </div>         </CardContent>       </Card>     );   }    // --- Render empty state ---   if (data.length === 0 && emptyState) {     return <div className={className}>{emptyState}</div>;   }    return (     <Card className={className}>       <CardContent className=\"p-0\">         <Table>           <TableHeader>             <TableRow>               <TableHead className=\"text-left\">No</TableHead>               {columns.map((column: TableColumn<T>, index: number) => (                 <TableHead key={index} className={column.className}>                   {column.header}                 </TableHead>               ))}               {actions.length > 0 && (                 <TableHead className=\"text-right\">Aksi</TableHead>               )}             </TableRow>           </TableHeader>           <TableBody>             {data.length > 0 ? (               data.map((item: T, index: number) => (                 <TableRow                   key={item.id}                   onClick={() => onRowClick?.(item)}                   className={                     onRowClick ? \"cursor-pointer hover:bg-gray-50\" : \"\"                   }                 >                   <TableCell>{startIndex + index + 1}</TableCell>                   {columns.map((column: TableColumn<T>, colIndex: number) => (                     <TableCell key={colIndex} className={column.className}>                       {typeof column.accessor === \"function\"                         ? column.accessor(item)                         : String(item[column.accessor as keyof T] ?? \"-\")}                     </TableCell>                   ))}                   {actions.length > 0 && (                     <TableCell className=\"text-right\">                       <div className=\"flex justify-end gap-2\">                         {actions.map(                           (action: TableAction<T>, actionIndex: number) => (                             <Button                               key={actionIndex}                               variant={action.variant || \"outline\"}                               size=\"sm\"                               onClick={(e) => {                                 e.stopPropagation();                                 action.onClick(item);                               }}                             >                               {action.icon}                               {action.label}                             </Button>                           )                         )}                       </div>                     </TableCell>                   )}                 </TableRow>               ))             ) : (               // --- Jika tidak ada data untuk halaman ini (seharusnya tidak terjadi karena pengecekan di useEffect) ---               <TableRow>                 <TableCell                   colSpan={columns.length + (actions.length > 0 ? 1 : 0)}                   className=\"text-center py-8 text-gray-500\"                 >                   No data available for this page.                 </TableCell>               </TableRow>             )}           </TableBody>         </Table>          {/* --- Render pesan jika data kosong (sebelum pagination) --- */}         {data.length === 0 && !emptyState && (           <div className=\"p-8 text-center text-gray-500\">No data available</div>         )}          {/* --- Render Pagination jika ada lebih dari 1 halaman --- */}         {totalPages > 1 && (           <div className=\"border-t px-4 py-3 flex items-center justify-between\">             <div className=\"text-sm text-muted-foreground\">               Menampilkan <span className=\"font-medium\">{startIndex + 1}</span>{\" \"}               sampai {\"\"}               <span className=\"font-medium\">                 {data.length + startIndex}               </span>{\" \"}               {\"\"}               dari <span className=\"font-medium\">{pagination.total_items}</span> entri             </div>             <Pagination>               <PaginationContent>                 <PaginationItem>                   <PaginationPrevious                     href=\"#\"                     onClick={(e) => {                       e.preventDefault();                       if (currentPage > 1) prevPage();                     }}                     aria-disabled={currentPage === 1}                     className={                       currentPage === 1 ? \"pointer-events-none opacity-50\" : \"\"                     }                   />                 </PaginationItem>                  {/* --- Logika sederhana untuk menampilkan nomor halaman --- */}                 {/* Tampilkan halaman 1 */}                 <PaginationItem>                   <PaginationLink                     href=\"#\"                     onClick={(e) => {                       e.preventDefault();                       goToPage(1);                     }}                     isActive={currentPage === 1}                   >                     1                   </PaginationLink>                 </PaginationItem>                  {/* Ellipsis jika halaman saat ini > 3 */}                 {currentPage > 3 && (                   <PaginationItem>                     <PaginationEllipsis />                   </PaginationItem>                 )}                  {/* Halaman sebelum saat ini */}                 {currentPage > 2 && (                   <PaginationItem>                     <PaginationLink                       href=\"#\"                       onClick={(e) => {                         e.preventDefault();                         goToPage(currentPage - 1);                       }}                     >                       {currentPage - 1}                     </PaginationLink>                   </PaginationItem>                 )}                  {/* Halaman saat ini (jika bukan 1 atau terakhir) */}                 {currentPage !== 1 && currentPage !== totalPages && (                   <PaginationItem>                     <PaginationLink                       href=\"#\"                       onClick={(e) => {                         e.preventDefault();                         // Tidak perlu aksi, ini adalah halaman saat ini                       }}                       isActive                     >                       {currentPage}                     </PaginationLink>                   </PaginationItem>                 )}                  {/* Halaman setelah saat ini */}                 {currentPage < totalPages - 1 && (                   <PaginationItem>                     <PaginationLink                       href=\"#\"                       onClick={(e) => {                         e.preventDefault();                         goToPage(currentPage + 1);                       }}                     >                       {currentPage + 1}                     </PaginationLink>                   </PaginationItem>                 )}                  {/* Ellipsis jika halaman saat ini < totalPages - 2 */}                 {currentPage < totalPages - 2 && (                   <PaginationItem>                     <PaginationEllipsis />                   </PaginationItem>                 )}                  {/* Tampilkan halaman terakhir jika totalPages > 1 */}                 {totalPages > 1 && (                   <PaginationItem>                     <PaginationLink                       href=\"#\"                       onClick={(e) => {                         e.preventDefault();                         goToPage(totalPages);                       }}                       isActive={currentPage === totalPages}                     >                       {totalPages}                     </PaginationLink>                   </PaginationItem>                 )}                  <PaginationItem>                   <PaginationNext                     href=\"#\"                     onClick={(e) => {                       e.preventDefault();                       if (currentPage < totalPages) nextPage();                     }}                     aria-disabled={currentPage === totalPages}                     className={                       currentPage === totalPages                         ? \"pointer-events-none opacity-50\"                         : \"\"                     }                   />                 </PaginationItem>               </PaginationContent>             </Pagination>           </div>         )}       </CardContent>     </Card>   ); };  export default ReusableTable;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        624,
        928
      ],
      "id": "faaa7d87-7d87-4186-917f-9931796fa8d4",
      "name": "Reusable Table"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "reusableAlertContent",
              "value": "import { useEffect } from \"react\"; import { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"; import { CheckCircle2Icon, XCircleIcon } from \"lucide-react\";  type AlertType = \"success\" | \"error\";  interface ReusableAlertProps {   type: AlertType;   title: string;   description: string;   duration?: number; // default 2000 ms   onClose: () => void; }  export default function ReusableAlert({   type,   title,   description,   duration = 3000,   onClose, }: ReusableAlertProps) {   // Auto close setelah duration   useEffect(() => {     const timer = setTimeout(() => {       onClose();     }, duration);     return () => clearTimeout(timer);   }, [duration, onClose]);    return (     <div className=\"fixed top-4 right-4 w-96 z-50 animate-in fade-in duration-300\">       <Alert         className={`flex items-center ${type === \"success\" ? \"bg-green-100\" : \"bg-red-100\"           }`}       >         {type === \"success\" ? (           <CheckCircle2Icon color=\"#00c950\" />         ) : (           <XCircleIcon color=\"#fb2c36\" />         )}         <div>           <AlertTitle             className={`${type === \"success\" ? \"text-green-500\" : \"text-red-500\"               }`}           >             {title}           </AlertTitle>           <AlertDescription>{description}</AlertDescription>         </div>       </Alert>     </div>   ); }",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        624,
        1152
      ],
      "id": "f2fad64c-c35e-4a5f-9b84-f14122485e0a",
      "name": "Reusable Alert"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "reusableModalContent",
              "value": "import {   Dialog,   DialogContent,   DialogHeader,   DialogTitle,   DialogDescription,   DialogFooter,   DialogClose, } from \"@/components/ui/dialog\"; import { Button } from \"@/components/ui/button\"; import { AlertTriangle, CheckCircle, Info } from \"lucide-react\"; import { cn } from \"@/lib/utils\";  // Tipe untuk modal variant export type ModalVariant =   | \"default\"   | \"confirm\"   | \"delete\"   | \"success\"   | \"warning\"   | \"info\";  // Props untuk ReusableModal export interface ReusableModalProps {   isOpen: boolean;   title: string;   description?: string;   children: React.ReactNode;   onConfirm?: () => void;   onCancel?: () => void;   confirmText?: string;   cancelText?: string;   variant?: ModalVariant;   isLoading?: boolean;   showCloseButton?: boolean;   className?: string; }  const ReusableModal = ({   isOpen,   title,   description,   children,   onConfirm,   onCancel,   confirmText = \"Confirm\",   cancelText = \"Cancel\",   variant = \"default\",   isLoading = false,   showCloseButton = true,   className = \"\", }: ReusableModalProps) => {   // Dapatkan konfigurasi berdasarkan variant   const getVariantConfig = () => {     const configs = {       default: {         icon: null,         confirmVariant: \"default\" as const,         titleClass: \"\",       },       confirm: {         icon: <CheckCircle className=\"h-5 w-5 text-green-500\" />,         confirmVariant: \"default\" as const,         titleClass: \"\",       },       delete: {         icon: <AlertTriangle className=\"h-5 w-5 text-red-500\" />,         confirmVariant: \"destructive\" as const,         titleClass: \"text-red-500\",       },       success: {         icon: <CheckCircle className=\"h-5 w-5 text-green-500\" />,         confirmVariant: \"default\" as const,         titleClass: \"text-green-500\",       },       warning: {         icon: <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />,         confirmVariant: \"default\" as const,         titleClass: \"text-yellow-500\",       },       info: {         icon: <Info className=\"h-5 w-5 text-blue-500\" />,         confirmVariant: \"default\" as const,         titleClass: \"text-blue-500\",       },     };      return configs[variant];   };    const config = getVariantConfig();    return (     <Dialog       open={isOpen}       onOpenChange={(open) => {         if (!open && onCancel) {           onCancel();         }       }}     >       <DialogContent className={cn(\"sm:max-w-[425px]\", className)}>         {/* Header dengan icon dan close button */}         <DialogHeader className=\"relative\">           <div className=\"flex items-center gap-3\">             {config.icon && <div className=\"flex-shrink-0\">{config.icon}</div>}             <div>               <DialogTitle className={cn(config.titleClass)}>                 {title}               </DialogTitle>               {description && (                 <DialogDescription>{description}</DialogDescription>               )}             </div>           </div>            {showCloseButton && (             <DialogClose               onClick={onCancel}               className=\"absolute right-0 top-0 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"             >               <span className=\"sr-only\">Close</span>             </DialogClose>           )}         </DialogHeader>          {/* Konten modal */}         <div className=\"py-4\">{children}</div>          {/* Footer dengan tombol aksi */}         {(onConfirm || onCancel) && (           <DialogFooter className=\"gap-2\">             {onCancel && (               <Button variant=\"outline\" onClick={onCancel} disabled={isLoading}>                 {cancelText}               </Button>             )}             {onConfirm && (               <Button                 variant={config.confirmVariant}                 onClick={onConfirm}                 disabled={isLoading}               >                 {isLoading ? \"Processing...\" : confirmText}               </Button>             )}           </DialogFooter>         )}       </DialogContent>     </Dialog>   ); };  export default ReusableModal;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        624,
        1360
      ],
      "id": "175e3426-05d0-4521-9189-bf205beb2cdf",
      "name": "Reusable Modal"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1056,
        720
      ],
      "id": "d8b7aa89-82f7-4990-b65e-6237283cf598",
      "name": "Merge Component"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1056,
        928
      ],
      "id": "b390ecfc-1532-4c4a-b69a-5e33f482672d",
      "name": "Merge Component1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1056,
        1152
      ],
      "id": "6aef322b-3c58-4602-82af-035acf0649e6",
      "name": "Merge Component2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1056,
        1360
      ],
      "id": "f322922d-a591-42c6-9c15-20919507c183",
      "name": "Merge Component3"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1952,
        -16
      ],
      "id": "87665b32-3e86-409a-a46d-4e21d2f6e409",
      "name": "Merge8"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var schemaContent = $json.schemaContent\nvar formContent = $json.formContent\nvar listContent = $json.listContent\nvar detailContent = $json.detailContent\nvar actionContent = $json.actionContent\nvar typeContent = $json.typeContent\nvar reusableFormContent = $json.ReuseblaFormContent\nvar reusableTableContent = $json.reusableTableContent\nvar reusableAlertContent = $json.reusableAlertContent\nvar reusableModalContent = $json.reusableModalContent\n\n\nconst systemMessage = `\nYou are an AI Assistant designed specifically to help developers with coding, architecture suggestions, debugging, and providing clear technical explanations. You may also engage in casual conversation.\n\n## Behavior Rules\n\n### 1. For General Coding Questions\nIf the user asks for:\n- Explanations (e.g., \"What is useEffect?\")\n- Debugging help (e.g., \"Why is my code crashing?\")\n- Code reviews, optimization, or best practices\n- Any non-generation request\n\n→ Respond **normally**, in a helpful, conversational tone.\n→ Use markdown if needed (code blocks, lists, etc.).\n→ **Do NOT use [writeFileVico] format.**\n→ Provide clear, accurate, and beginner-friendly explanations when appropriate.\n\n---\n\n### 2. For Model or Page Generation Requests\nIf the user explicitly asks to:\n- \"Generate a model\"\n- \"Generate a page\"\n- \"Create a page\"\n- \"Build CRUD for X\"\n- \"Make a form for user\"\n\n→ First, **check if the schema or requirements are complete**:\n   - Are all fields defined?\n   - Are types, validations, relationships clear?\n   - If not, **ask the user to clarify**.\n   - Do not generate anything until complete.\n\n→ If complete, respond **only** with the structured block:\n\n[writeFileVico]\nname: <folder_name_in_snake_case>\nschema: <filename.schema.ts>\n\\`\\`\\`ts\n${schemaContent}\n\\`\\`\\`\n\nform: <ComponentNameForm.tsx>\n\\`\\`\\`tsx\n${formContent}\n\\`\\`\\`\n\ntable: <ComponentNameList.tsx>\n\\`\\`\\`tsx\n${listContent}\n\\`\\`\\`\n\ndetail: <ComponentNameDetailView.tsx>\n\\`\\`\\`tsx\n${detailContent}\n\\`\\`\\`\n\naction: <filename.action.ts>\n\\`\\`\\`ts\n${actionContent}\n\\`\\`\\`\n\ntype: <filename.ts>\n\\`\\`\\`ts\n${typeContent}\n\\`\\`\\`\n\n⚠️ Rules for this format:\n- Only use this block **after schema is confirmed complete**.\n- Do not add any text before or after the block.\n- Never generate code manually — placeholders like \\`${schemaContent}\\` will be filled by the system.\n- Keep the order: name → schema → form → table → detail → action → type.\n- Use triple backticks with language tags: \\`\\`\\`ts or \\`\\`\\`tsx.\n\nthis is components U should training and not to be generate, because it already exists on code base:\nReusableAlert.tsx:\n\\`\\`\\`ts\n${reusableAlertContent}\n\\`\\`\\`\n\nReusableForm.tsx:\n\\`\\`\\`ts\n${reusableFormContent}\n\\`\\`\\`\n\nReusableTable.tsx:\n\\`\\`\\`ts\n${reusableTableContent}\n\\`\\`\\`\n\nReusableModal.tsx:\n\\`\\`\\`ts\n${reusableModalContent}\n\\`\\`\\`\n\n---\n\n## Summary\n- ✅ For general help: answer naturally.\n- ✅ For generation: \n   - Use strict [writeFileVico] format only when schema is confirmed complete.\n   - If the project clearly uses React + Vite, follow the provided template components.\n   - If the workspace does NOT use React + Vite (or looks different), IGNORE the template and use the user's own workspace structure as reference.\n- ✅ Generate file based on user workspace.\n- ❌ Never force [writeFileVico] on non-generation requests.\n- ❌ Never generate incomplete or guessed code.\n\nYour flexibility makes you a powerful assistant for both learning and automation.\n`;\n\nvar data = {\n  systemMessage\n}\n\nreturn data"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1664,
        -48
      ],
      "id": "1918a00a-a072-4a45-b6c3-06e6cbe18781",
      "name": "System Message"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "schemaContent",
              "value": "import { z } from \"zod\";  export const goatSchema = z.object({   code: z.string({ required_error: \"Kode harus diisi\" }),   type_id: z.number().min(1, \"Tipe harus diisi\"),   status_id: z.number().min(1, \"Status harus diisi\"),   category_id: z.number().min(1, \"Kategori harus diisi\"),   gender: z.string({ required_error: \"Gender harus diisi\" }),   birth_date: z.coerce.date({     required_error: \"Tanggal lahir harus diisi\",     invalid_type_error: \"Tanggal lahir tidak valid\"   }),   location: z.string({ required_error: \"Lokasi harus diisi\" }),   notes: z.string().optional(),   condition_id: z.number().min(1, \"Kondisi harus diisi\"),   image_path: z.any().optional(),   mother_id: z.number().optional(),   father_id: z.number().optional(),   characteristics: z.string().optional(),   breeding_id: z.number().optional(),   room_id: z.number().optional(),   farm_id: z.number().optional(),   is_sale: z.boolean(),   is_sold: z.boolean(), });  export type GoatSchemaType = z.infer<typeof goatSchema>;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2080,
        2144
      ],
      "id": "a7173d28-2036-4221-afc3-30d021df2412",
      "name": "schema1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2528,
        2256
      ],
      "id": "8e9c3ead-877e-4099-8650-1bb03f5506c7",
      "name": "Merge4"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2528,
        2544
      ],
      "id": "57e75885-57e9-467d-8e71-0513920016e9",
      "name": "Merge5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "actionContent",
              "value": "import api from \"@/lib/axiosInstance\";  const GoatAction = {   async get(page?: number) {     const response = await api.get(\"/goats\", {       params: { page },     });     return response;   },    async create(formData: any) {     const response = await api.post(\"/goats\", formData);     return response;   },    async detail(goatId: number) {     const response = await api.get(`/goats/${goatId}`);     return response;   },    async update(goatId: number, formData: any) {     const response = await api.put(`/goats/${goatId}`, formData);     return response;   },    async delete(goatId: number) {     const response = await api.delete(`/goats/${goatId}`);     return response;   }, };  export default GoatAction;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2080,
        2352
      ],
      "id": "9663b755-ae69-47d3-bfdc-e6a4a7194660",
      "name": "action1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "formContent",
              "value": "import { useState, useEffect } from \"react\"; import { useNavigate, useParams } from \"react-router-dom\"; import ReusableForm from \"@/components/shared/ReusableForm/ReusableForm\"; import ReusableModal from \"@/components/shared/ReusableModal/ReusableModal\"; import { Button } from \"@/components/ui/button\"; import { ArrowLeft } from \"lucide-react\"; import AppLayout from \"@/AppLayout\"; import { goatSchema, type GoatSchemaType } from \"@/validations/goat.schema\"; import GlobalAction from \"@/actions/global.action\"; import GoatAction from \"@/actions/goat.action\"; import { parseDate } from \"@/lib/formatter\"; import { GoatFormInitialValue, type GoatFormInitialValues } from \"@/types/goats\"; import useStore from \"@/store\"; import type { FieldType, FormSection } from \"@/types/form\";  const GoatForm = () => {   const navigate = useNavigate();   const { farmStore } = useStore()   const { id } = useParams();   const isEdit = Boolean(id);   const [isLoading, setIsLoading] = useState({ isGoatByGender: false });   const [isSubmitting, setIsSubmitting] = useState(false);   const [showSuccessModal, setShowSuccessModal] = useState(false);   const [categories, setCategories] = useState([]);   const [conditions, setConditions] = useState([]);   const [farms, setFarms] = useState([]);   const [statuses, setStatuses] = useState([]);   const [types, setTypes] = useState([]);   const [cages, setCages] = useState([]);   const [breedings, setBreedings] = useState([]);   const [existingGoat, setExistingGoat] = useState<GoatFormInitialValues>();   const [maleGoats, setMaleGoats] = useState([]);   const [femaleGoats, setFemaleGoats] = useState([]);   const [initialValues, setInitialValues] = useState<GoatFormInitialValues>(     {       ...GoatFormInitialValue,       location: farmStore.location,       farm_id: farmStore.id     });    useEffect(() => {     fetchCategories()     fetchConditions()     fetchFarms()     fetchStatuses()     fetchTypes()     fetchCages()     fetchBreeding()     fetchGoatByGender()   }, [])    useEffect(() => {     if (id) {       fetchDetail()     }   }, [id])    useEffect(() => {     if (!id && farmStore.id) {       setInitialValues((prev) => ({         ...prev,         location: farmStore.location,         farm_id: farmStore.id,       }))     }      if (existingGoat && femaleGoats.length && maleGoats.length) {       setInitialValues({         code: existingGoat.code || \"\",         type_id: existingGoat.type_id || 0,         status_id: existingGoat.status_id ?? 0,         category_id: existingGoat.category_id ?? 0,         gender: existingGoat.gender ? convertGender(existingGoat.gender) : \"\",         birth_date: existingGoat.birth_date ? parseDate(String(existingGoat.birth_date)) ?? undefined : undefined,         location: existingGoat.location || \"\",         notes: existingGoat.notes || \"\",         condition_id: existingGoat.condition_id ?? 0,         image_path: existingGoat.image_path ? [existingGoat.image_path as any] : [],         mother_id: existingGoat.mother_id || 0,         father_id: existingGoat.father_id || 0,         characteristics: existingGoat.characteristics || \"\",         breeding_id: existingGoat.breeding_id || 0,         room_id: existingGoat.room_id || 0,         farm_id: existingGoat.farm_id || 0,         is_sale: existingGoat.is_sale || false,         is_sold: existingGoat.is_sold || false,       });     }   }, [farmStore.id, id, isLoading.isGoatByGender, existingGoat, femaleGoats.length, maleGoats.length]);     function convertGender(gender: string) {     if (gender.toLocaleUpperCase().trim() === \"BETINA\") return \"female\";     else return \"male\"   }    const fetchGoatByGender = async () => {     setIsLoading({ isGoatByGender: true })     try {       const femaleGoat = await GlobalAction.goatByGender(\"female\")       const maleGoat = await GlobalAction.goatByGender(\"male\")       if (femaleGoat.status === 200 && maleGoat.status === 200) {         const dataMaleGoat = maleGoat.data.data         const mappingMaleGoat = dataMaleGoat.map((item: any) => ({           value: item.id,           label: `${item.code} - ${item.type.type_name}`         }))         const dataFemaleGoat = femaleGoat.data.data         const mappingFemaleGoat = dataFemaleGoat.map((item: any) => ({           value: item.id,           label: `${item.code} - ${item.type.type_name}`         }))         setMaleGoats(mappingMaleGoat)         setFemaleGoats(mappingFemaleGoat)         setIsLoading({ isGoatByGender: false })       }     } catch (error) {       console.error(error);     }   }     const fetchCategories = async () => {     try {       const response = await GlobalAction.category()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.category_name         }))         setCategories(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchDetail = async () => {     try {       const goatId = id ? parseInt(id) : 0       const response = await GoatAction.detail(goatId)       if (response.status === 200) {         const data = response.data.data         setExistingGoat(data)       }     } catch (error) {       console.error(error);     }   }    const fetchConditions = async () => {     try {       const response = await GlobalAction.condition()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.condition_name         }))         setConditions(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchFarms = async () => {     try {       const response = await GlobalAction.farm()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.name         }))         setFarms(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchStatuses = async () => {     try {       const response = await GlobalAction.status()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.status_name         }))         setStatuses(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchTypes = async () => {     try {       const response = await GlobalAction.type()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.type_name         }))         setTypes(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchCages = async () => {     try {       const response = await GlobalAction.cages()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.room_name         }))         setCages(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchBreeding = async () => {     try {       const response = await GlobalAction.breeding()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           ...item,           value: item.id,           label: `Jantan ${item.maleGoat?.code} (${item.maleGoat?.type?.type_name}) - Betina ${item.femaleGoat?.code} (${item.femaleGoat?.type?.type_name}) `         }))         setBreedings(mapping)       }     } catch (error) {       console.error(error);     }   }    const handleSubmit = async (values: any) => {     setIsSubmitting(true);     const result = goatSchema.safeParse(values);     if (result.success) {       try {         const formData = new FormData();         Object.entries(result.data).forEach(([key, value]) => {           if (value !== undefined && value !== null) {             formData.append(key, String(value));           }         });          if (values.image_path && Array.isArray(values.image_path)) {           values.image_path.forEach((file: File) => {             formData.append(\"image\", file);           });           formData.delete(\"image_path\");         }          const response = id ? await GoatAction.update(parseInt(id), formData) : await GoatAction.create(formData)         if (response.status === 201 || response.status === 200) {           setShowSuccessModal(true);         }         console.log(\"Validation successful, data is valid\");       } catch (error) {         console.error(\"Error saving goat:\", error);       }     } else {       console.error(\"Validation failed:\", result.error);     }     setIsSubmitting(false);   };    const handleCancel = () => navigate(\"/goats\");   const handleSuccessConfirm = () => {     setShowSuccessModal(false);     navigate(\"/goats\");   };    const sections: FormSection<GoatSchemaType>[] = [     {       title: \"Informasi Dasar\",       fields: [         { name: \"code\" as keyof GoatSchemaType, label: \"Kode Kambing\", type: \"text\" as const },         {           name: \"type_id\" as keyof GoatSchemaType,           label: \"Tipe\",           type: \"select\" as const,           options: types,         },         {           name: \"status_id\" as keyof GoatSchemaType,           label: \"Status\",           type: \"select\" as const,           options: statuses,         },         {           name: \"category_id\" as keyof GoatSchemaType,           label: \"Kategori\",           type: \"select\" as const,           options: categories,         },         {           name: \"gender\" as keyof GoatSchemaType,           label: \"Jenis Kelamin\",           type: \"select\" as const,           options: [             { value: \"male\", label: \"Jantan\" },             { value: \"female\", label: \"Betina\" },           ],         },         { name: \"birth_date\" as keyof GoatSchemaType, label: \"Tanggal Lahir\", type: \"date\" },       ],     },     {       title: \"Detail & Karakteristik\",       fields: [         { name: \"location\" as keyof GoatSchemaType, label: \"Lokasi\", type: \"text\" as const, disabled: true },         { name: \"notes\" as keyof GoatSchemaType, label: \"Catatan\", type: \"textarea\" as const },         {           name: \"condition_id\" as keyof GoatSchemaType,           label: \"Kondisi\",           type: \"select\" as const,           options: conditions,         },         {           name: \"image_path\" as keyof GoatSchemaType,           label: \"Foto\",           type: \"file\" as const,           accept: \".png,.jpg,.jpeg\",         },         { name: \"characteristics\" as keyof GoatSchemaType, label: \"Ciri Khas\", type: \"textarea\" as const },       ],     },     {       title: \"Relasi & Breeding\",       fields: [         {           name: \"breeding_id\" as keyof GoatSchemaType,           label: \"Breeding\",           type: \"select\" as const,           options: breedings         },         {           name: \"mother_id\" as keyof GoatSchemaType,           label: \"ID Induk Betina\",           type: \"select\" as const,           disabled: true,           options: femaleGoats         },         {           name: \"father_id\" as keyof GoatSchemaType,           label: \"ID Induk Jantan\",           type: \"select\" as const,           disabled: true,           options: maleGoats         },         {           name: \"room_id\" as keyof GoatSchemaType,           label: \"Kandang\",           type: \"select\" as const,           options: cages         },         {           name: \"farm_id\" as keyof GoatSchemaType,           label: \"Farm\",           type: \"select\" as const,           disabled: true,           options: farms         },       ],     },     {       title: \"Status Penjualan\",       fields: [         { name: \"is_sale\" as keyof GoatSchemaType, label: \"Dijual?\", type: \"checkbox\" as const },         { name: \"is_sold\" as keyof GoatSchemaType, label: \"Sudah Terjual?\", type: \"checkbox\" as const },       ],     },   ];     const handleChangeInput = ({     input,   }: {     input: { name: string; value: any };     type: FieldType;   }) => {     const { name, value } = input;      setInitialValues((prev: GoatFormInitialValues) => {       const getField = (sectionIndex: number, fieldIndex: number) =>         sections[sectionIndex]?.fields[fieldIndex]?.name;        const simpleFieldUpdates: Record<string, keyof GoatFormInitialValues> = {         [getField(0, 0)]: 'code',         [getField(0, 1)]: 'type_id',         [getField(0, 2)]: 'status_id',         [getField(0, 3)]: 'category_id',         [getField(0, 4)]: 'gender',         [getField(0, 5)]: 'birth_date',         [getField(1, 0)]: 'location',         [getField(1, 1)]: 'notes',         [getField(1, 2)]: 'condition_id',         [getField(1, 3)]: 'image_path',         [getField(1, 4)]: 'characteristics',         [getField(2, 3)]: 'room_id',         [getField(3, 0)]: 'is_sale',         [getField(3, 1)]: 'is_sold',       };        const targetKey = simpleFieldUpdates[name];       if (targetKey) {         return { ...prev, [targetKey]: value };       }        if (name === getField(2, 0)) {         const breeding: any = breedings.find((b: any) => b.id === Number(value));          return {           ...prev,           breeding_id: value,           mother_id: breeding?.female_id ?? null,           father_id: breeding?.male_id ?? null,         };       }        return prev;     });   };    return (     <AppLayout       breadcrumbItems={         isEdit           ? [             { title: \"Kambing\", href: \"/goats\" },             { title: \"Edit Kambing\" },           ]           : [             { title: \"Kambing\", href: \"/goats\" },             { title: \"Tambahkan Kambing\" },           ]       }     >       <div className=\"space-y-6\">         <div className=\"flex items-center gap-3\">           <Button variant=\"outline\" size=\"icon\" onClick={() => navigate(\"/goats\")}>             <ArrowLeft className=\"h-4 w-4\" />           </Button>           <div>             <h1 className=\"text-3xl font-bold\">               {isEdit ? \"Edit Kambing\" : \"Tambahkan Kambing\"}             </h1>           </div>         </div>          <ReusableForm<GoatSchemaType>           sections={sections}           initialValues={initialValues}           onChangePerInput={handleChangeInput}           onSubmit={handleSubmit}           onCancel={handleCancel}           submitText={isEdit ? \"Perbarui\" : \"Tambah\"}           cancelText=\"Batal\"           loading={isSubmitting}           schema={goatSchema}         />          <ReusableModal           isOpen={showSuccessModal}           title={isEdit ? \"Kambing Diperbarui!\" : \"Kambing Ditambahkan!\"}           description={isEdit ? \"Informasi berhasil diperbarui.\" : \"Data berhasil ditambahkan.\"}           variant=\"success\"           confirmText=\"OK\"           onConfirm={handleSuccessConfirm}         >           <div className=\"text-center py-4\">             <p className=\"text-sm text-muted-foreground\">               Anda akan dialihkan ke daftar kambing.             </p>           </div>         </ReusableModal>       </div>     </AppLayout>   ); };  export default GoatForm;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2080,
        2528
      ],
      "id": "93d9c264-b2bf-42c9-a67c-24a305678d83",
      "name": "form1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "listContent",
              "value": "import { useState, useEffect } from \"react\"; import { useNavigate } from \"react-router-dom\"; import ReusableTable from \"@/components/shared/ReusableTable/ReusableTable\"; import ReusableModal from \"@/components/shared/ReusableModal/ReusableModal\"; import ReusableAlert from \"@/components/shared/ReusableAlert/ReusableAlert\"; import { type Goat } from \"@/types/goats\"; import { Button } from \"@/components/ui/button\"; import { Pencil, Trash2, Eye, Plus, Filter, X } from \"lucide-react\"; import type { TableColumn, TableAction } from \"@/types/table\"; import AppLayout from \"@/AppLayout\"; import { Input } from \"@/components/ui/input\"; import { Label } from \"@/components/ui/label\"; import {   Select,   SelectContent,   SelectItem,   SelectTrigger,   SelectValue, } from \"@/components/ui/select\"; import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"; import GoatAction from \"@/actions/goat.action\"; import { calculateAgeInMonths, dateformat } from \"@/lib/formatter\"; import GlobalAction from \"@/actions/global.action\"; import { PaginationInitial, type Pagination } from \"@/types/page\";  const GoatList = () => {   const navigate = useNavigate();   const [goats, setGoats] = useState<Goat[]>([]);   const [femaleGoats, setFemaleGoats] = useState([]);   const [maleGoats, setMaleGoats] = useState([]);   const [paginations, setPaginations] = useState<Pagination>(PaginationInitial);    useEffect(() => {     fetchGoats();     fetchGoatByGender()   }, []);    const fetchGoatByGender = async () => {     try {       const femaleGoat = await GlobalAction.goatByGender(\"female\")       const maleGoat = await GlobalAction.goatByGender(\"male\")       if (femaleGoat.status === 200 && maleGoat.status === 200) {         const dataMaleGoat = maleGoat.data.data         const mappingMaleGoat = dataMaleGoat.map((item: any) => ({           value: item.id,           label: `${item.code} - ${item.type.type_name} - ${item.category.category_name}`         }))         const dataFemaleGoat = femaleGoat.data.data         const mappingFemaleGoat = dataFemaleGoat.map((item: any) => ({           value: item.id,           label: `${item.code} - ${item.type.type_name} - ${item.category.category_name}`         }))         setMaleGoats(mappingMaleGoat)         setFemaleGoats(mappingFemaleGoat)       }     } catch (error) {       console.error(error);     }   }     const fetchGoats = async (page?: number) => {     try {       const response = await GoatAction.get(page);       if (response.status == 200) {         setGoats(response.data.data);         response.data?.pagination && setPaginations(response.data.pagination)       }     } catch (error) {       console.error(error);     }   };    const handleGotoPage = (page: number) => {     fetchGoats(page)   }     // 🔧 State untuk filter   const [filters, setFilters] = useState({     code: \"\",     type: \"\",     status: \"\",     gender: \"\",     minAge: \"\",     maxAge: \"\",   });    // 🔧 State untuk menampilkan filter card   const [showFilter, setShowFilter] = useState(false);    const [deleteModal, setDeleteModal] = useState<{     isOpen: boolean;     goat: Goat | null;   }>({     isOpen: false,     goat: null,   });    // 🔧 Handler untuk mengubah filter   const handleFilterChange = (field: string, value: string) => {     setFilters((prev) => ({       ...prev,       [field]: value,     }));   };    // 🔧 Handler untuk reset filter   const resetFilters = () => {     setFilters({       code: \"\",       type: \"\",       status: \"\",       gender: \"\",       minAge: \"\",       maxAge: \"\",     });   };    const handleEdit = (goat: Goat) => {     navigate(`/goats/${goat.id}/edit`);   };    const handleDelete = (goat: Goat) => {     setDeleteModal({       isOpen: true,       goat: goat,     });   };    const handleDeleteCancel = () => {     setDeleteModal({       isOpen: false,       goat: null,     });   };    const handleView = (goat: Goat) => {     navigate(`/goats/${goat.id}/view`);   };    const handleAddNew = () => {     navigate(\"/goats/new\");   };   const columns: TableColumn<Goat>[] = [     { header: \"Kode\", accessor: (goat: Goat) => goat.code },     {       header: \"Tipe\",       accessor: (goat: Goat) => goat.type.type_name,     },     {       header: \"Status\",       accessor: (goat: Goat) => goat.status.status_name,     },     { header: \"Jenis Kelamin\", accessor: \"gender\" },     {       header: \"Usia (bulan)\",       accessor: (goat: Goat) => calculateAgeInMonths(goat.birth_date),     },     {       header: \"Tanggal lahir\",       accessor: (goat: Goat) => dateformat(goat.birth_date),     },     { header: \"Lokasi\", accessor: \"location\" },   ];    const actions: TableAction<Goat>[] = [     {       label: \"Detail\",       onClick: handleView,       variant: \"outline\",       icon: <Eye className=\"h-4 w-4 mr-2\" />,     },     {       label: \"Edit\",       onClick: handleEdit,       variant: \"default\",       icon: <Pencil className=\"h-4 w-4 mr-2\" />,     },     {       label: \"Hapus\",       onClick: handleDelete,       variant: \"destructive\",       icon: <Trash2 className=\"h-4 w-4 mr-2\" />,     },   ];    // Calculate statistics   const totalGoats = paginations.total_items || goats.length;   const JantanGoats = maleGoats.length;   const BetinaGoats = femaleGoats.length;    const [alertData, setAlertData] = useState<{     type: \"success\" | \"error\";     title: string;     description: string;   } | null>(null);    const handleDeleteConfirm = async () => {     if (!deleteModal.goat) return;      try {       const response = await GoatAction.delete(deleteModal.goat.id);       if (response.status === 200) {         setGoats((prevGoats) =>           prevGoats.filter((goat) => goat.id !== deleteModal.goat?.id)         );         setDeleteModal({ isOpen: false, goat: null });         setAlertData({           type: \"success\",           title: \"Berhasil\",           description: \"Kambing berhasil dihapus.\",         });       }     } catch (error) {       console.error(\"Failed to delete goat:\", error);       setAlertData({         type: \"error\",         title: \"Gagal\",         description: \"Terjadi kesalahan saat menghapus kambing.\",       });     }   };    return (     <AppLayout       breadcrumbItems={[         { title: \"Kambing\", href: \"/goats\" },         { title: \"Manajemen Kambing\" },       ]}     >       <div className=\"space-y-6\">         <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4\">           <div>             <h1 className=\"text-3xl font-bold\">Manajemen Kambing</h1>             <p className=\"text-muted-foreground\">               Kelola inventaris dan informasi kambing Anda             </p>           </div>           <div className=\"flex gap-2\">             <Button               variant={showFilter ? \"default\" : \"outline\"}               onClick={() => setShowFilter(!showFilter)}             >               <Filter className=\"h-4 w-4 mr-2\" />               {showFilter ? \"Tutup Pencarian\" : \"Cari\"}             </Button>             <Button onClick={handleAddNew}>               <Plus className=\"h-4 w-4 mr-2\" />               Tambah Data Kambing             </Button>           </div>         </div>          {/* 🔧 Filter Card */}         {showFilter && (           <Card>             <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">               <CardTitle>Filter Goats</CardTitle>               <Button                 variant=\"ghost\"                 size=\"icon\"                 onClick={() => setShowFilter(false)}                 className=\"h-6 w-6 p-0\"               >                 <X className=\"h-4 w-4\" />               </Button>             </CardHeader>             <CardContent className=\"space-y-4\">               <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4\">                 <div className=\"space-y-2\">                   <Label>Kode Kambing</Label>                   <Input                     value={filters.code}                     onChange={(e) => handleFilterChange(\"code\", e.target.value)}                     placeholder=\"Cari berdasarkan kode\"                   />                 </div>                  <div className=\"space-y-2\">                   <Label>Tipe</Label>                   <Select                     value={filters.type || undefined}                     onValueChange={(value) =>                       handleFilterChange(                         \"type\",                         value === \"__semua__\" ? \"\" : value                       )                     }                   >                     <SelectTrigger>                       <SelectValue placeholder=\"Pilih tipe\" />                     </SelectTrigger>                     <SelectContent>                       <SelectItem value=\"__semua__\">Semua Tipe</SelectItem>                       <SelectItem value=\"boer\">Boer</SelectItem>                       <SelectItem value=\"local\">Local</SelectItem>                       <SelectItem value=\"cross\">Cross Breed</SelectItem>                     </SelectContent>                   </Select>                 </div>                  <div className=\"space-y-2\">                   <Label>Status</Label>                   <Select                     value={filters.status || undefined}                     onValueChange={(value) =>                       handleFilterChange(                         \"status\",                         value === \"__semua__\" ? \"\" : value                       )                     }                   >                     <SelectTrigger>                       <SelectValue placeholder=\"Pilih status\" />                     </SelectTrigger>                     <SelectContent>                       <SelectItem value=\"__semua__\">All Status</SelectItem>                       <SelectItem value=\"aktif\">Aktif</SelectItem>                       <SelectItem value=\"pembiakan\">Pembiakan</SelectItem>                       <SelectItem value=\"terjual\">Terjual</SelectItem>                       <SelectItem value=\"sakit\">Sakit</SelectItem>                     </SelectContent>                   </Select>                 </div>                  <div className=\"space-y-2\">                   <Label>Gender</Label>                   <Select                     value={filters.gender || undefined}                     onValueChange={(value) =>                       handleFilterChange(                         \"gender\",                         value === \"__semua__\" ? \"\" : value                       )                     }                   >                     <SelectTrigger>                       <SelectValue placeholder=\"Pilih jenis kelamin\" />                     </SelectTrigger>                     <SelectContent>                       <SelectItem value=\"__semua__\">                         All Jenis Kelamin                       </SelectItem>                       <SelectItem value=\"Jantan\">Jantan</SelectItem>                       <SelectItem value=\"Betina\">Betina</SelectItem>                     </SelectContent>                   </Select>                 </div>                  <div className=\"space-y-2\">                   <Label>Usia Minimum (bulan)</Label>                   <Input                     type=\"number\"                     placeholder=\"0\"                     value={filters.minAge}                     onChange={(e) =>                       handleFilterChange(\"minAge\", e.target.value)                     }                   />                 </div>                  <div className=\"space-y-2\">                   <Label>Usia Maksimal (months)</Label>                   <Input                     type=\"number\"                     placeholder=\"100\"                     value={filters.maxAge}                     onChange={(e) =>                       handleFilterChange(\"maxAge\", e.target.value)                     }                   />                 </div>               </div>                <div className=\"flex justify-end gap-2\">                 <Button variant=\"outline\" onClick={resetFilters}>                   Atur Ulang                 </Button>               </div>             </CardContent>           </Card>         )}          {/* Statistics Cards */}         <div className=\"grid gap-4 md:grid-cols-3\">           <Card>             <CardHeader className=\"pb-2\">               <CardTitle className=\"text-sm font-medium\">                 Total Kambing               </CardTitle>             </CardHeader>             <CardContent>               <div className=\"text-2xl font-bold\">{totalGoats}</div>               <p className=\"text-xs text-muted-foreground\">Dalam inventaris</p>             </CardContent>           </Card>           <Card>             <CardHeader className=\"pb-2\">               <CardTitle className=\"text-sm font-medium\">                 Kambing Jantan               </CardTitle>             </CardHeader>             <CardContent>               <div className=\"text-2xl font-bold\">{JantanGoats}</div>               <p className=\"text-xs text-muted-foreground\">Ekor</p>             </CardContent>           </Card>           <Card>             <CardHeader className=\"pb-2\">               <CardTitle className=\"text-sm font-medium\">                 Kambing Betina               </CardTitle>             </CardHeader>             <CardContent>               <div className=\"text-2xl font-bold\">{BetinaGoats}</div>               <p className=\"text-xs text-muted-foreground\">Ekor</p>             </CardContent>           </Card>         </div>          <ReusableTable           data={goats}           columns={columns}           actions={actions}           pagination={paginations}           onClickGoToPage={handleGotoPage}           emptyState={             <div className=\"text-center py-12\">               <h3 className=\"text-lg font-medium mb-2\">                 Tidak ada kambing ditemukan               </h3>               {/* <p className=\"text-muted-foreground mb-4\">                 {filteredGoats.length === 0 && goats.length > 0                   ? \"Tidak ada kambing yang sesuai dengan kriteria pencarian Anda\"                   : \"Mulailah dengan menambahkan kambing pertama Anda\"}               </p> */}               <Button onClick={handleAddNew}>                 <Plus className=\"h-4 w-4 mr-2\" />                 Tambah Kambing Pertama               </Button>             </div>           }         />          {/* Delete Confirmation Modal */}         <ReusableModal           isOpen={deleteModal.isOpen}           title=\"Hapus Kambing\"           description={`Apakah Anda yakin ingin menghapus kambing ${deleteModal.goat?.code}? Tindakan ini tidak dapat dibatalkan.`}           variant=\"delete\"           confirmText=\"Hapus\"           cancelText=\"Batal\"           onConfirm={handleDeleteConfirm}           onCancel={handleDeleteCancel}         >           <div className=\"text-sm text-muted-foreground\">             <p>Ini akan menghapus kambing secara permanen dari sistem Anda.</p>           </div>         </ReusableModal>          {alertData && (           <ReusableAlert             type={alertData.type}             title={alertData.title}             description={alertData.description}             onClose={() => setAlertData(null)}           />         )}       </div>     </AppLayout>   ); };  export default GoatList;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2080,
        2704
      ],
      "id": "fec9d858-04c5-484e-ab6c-8eb3c193a5d4",
      "name": "list1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "detailContent",
              "value": "\"use client\"  import { useNavigate, useParams } from \"react-router-dom\" import { Button } from \"@/components/ui/button\" import { ArrowLeft, Pencil, ZoomIn } from \"lucide-react\" import type { Goat } from \"@/types/goats\" import AppLayout from \"@/AppLayout\" import { useEffect, useState } from \"react\" import GoatAction from \"@/actions/goat.action\" import { dateformat } from \"@/lib/formatter\"  const GoatDetailView = () => {   const navigate = useNavigate()   const { id } = useParams()   const [goat, setGoat] = useState<Goat>()   const [selectedPhoto, setSelectedPhoto] = useState<string | null>(null)    useEffect(() => {     fetchDetail()   }, [])    const fetchDetail = async () => {     try {       const goatId = id ? Number.parseInt(id) : 0       const response = await GoatAction.detail(goatId)       if (response.status === 200) {         const data = response.data.data         setGoat(data)       }     } catch (error) {       console.error(error)     }   }    if (!goat) {     return (       <AppLayout breadcrumbItems={[{ title: \"Goats\", href: \"/goats\" }, { title: \"Detail Kambing\" }]}>         <div className=\"space-y-6\">           <div className=\"flex items-center gap-3\">             <Button variant=\"outline\" size=\"icon\" onClick={() => navigate(\"/goats\")}>               <ArrowLeft className=\"h-4 w-4\" />             </Button>             <h1 className=\"text-3xl font-bold\">Detail Kambing</h1>           </div>           <p className=\"text-muted-foreground\">Kambing yang Anda cari tidak ada.</p>         </div>       </AppLayout>     )   }    const handleEdit = () => {     navigate(`/goats/${goat.id}/edit`)   }    return (     <AppLayout breadcrumbItems={[{ title: \"Goats\", href: \"/goats\" }, { title: \"Detail Kambing\" }]}>       <div className=\"space-y-6\">         <div className=\"flex items-center justify-between\">           <div className=\"flex items-center gap-3\">             <Button variant=\"outline\" size=\"icon\" onClick={() => navigate(\"/goats\")}>               <ArrowLeft className=\"h-4 w-4\" />             </Button>             <div>               <h1 className=\"text-3xl font-bold\">Detail Kambing</h1>               <p className=\"text-muted-foreground\">Lihat informasi kambing</p>             </div>           </div>           <Button onClick={handleEdit}>             <Pencil className=\"h-4 w-4 mr-2\" />             Edit Kambing           </Button>         </div>           <div className=\"grid gap-6 md:grid-cols-2\">           <div className=\"rounded-lg border p-6\">             <h2 className=\"text-xl font-semibold mb-4\">Galeri Foto</h2>             <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">               <div                 className=\"group relative aspect-[4/3] overflow-hidden rounded-lg border bg-muted cursor-pointer transition-all hover:shadow-md\"                 onClick={() => setSelectedPhoto(goat.image_path)}               >                 <img                   src={goat.image_path || \"/placeholder.svg\"}                   className=\"h-full w-full object-cover transition-transform group-hover:scale-105\"                 />                 <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors flex items-center justify-center\">                   <ZoomIn className=\"h-6 w-6 text-white opacity-0 group-hover:opacity-100 transition-opacity\" />                 </div>               </div>             </div>           </div>           <div className=\"space-y-6\">             <div className=\"rounded-lg border p-6\">               <h2 className=\"text-xl font-semibold mb-4\">Informasi Dasar</h2>               <div className=\"space-y-4\">                 <div className=\"flex justify-between\">                   <span className=\"text-muted-foreground\">Kode</span>                   <span className=\"font-medium\">{goat.code}</span>                 </div>                 <div className=\"flex justify-between\">                   <span className=\"text-muted-foreground\">Jenis</span>                   <span className=\"font-medium\">{goat.type?.type_name}</span>                 </div>                 <div className=\"flex justify-between\">                   <span className=\"text-muted-foreground\">Jenis Kelamin</span>                   <span className=\"font-medium\">{goat.gender}</span>                 </div>                 <div className=\"flex justify-between\">                   <span className=\"text-muted-foreground\">Tanggal Lahir</span>                   <span className=\"font-medium\">{dateformat(goat.birth_date)}</span>                 </div>               </div>             </div>           </div>         </div>          <div className=\"rounded-lg border p-6\">           <h2 className=\"text-xl font-semibold mb-4\">Informasi Status</h2>           <div className=\"space-y-4\">             <div className=\"flex justify-between\">               <span className=\"text-muted-foreground\">Status</span>               <span className=\"font-medium\">{goat.status?.status_name}</span>             </div>             <div className=\"flex justify-between\">               <span className=\"text-muted-foreground\">Lokasi</span>               <span className=\"font-medium\">{goat.location}</span>             </div>           </div>         </div>         <div className=\"space-y-6\">           <div className=\"rounded-lg border p-6\">             <h2 className=\"text-xl font-semibold mb-4\">Informasi Tambahan</h2>             <div className=\"space-y-4\">               <div>                 <span className=\"text-muted-foreground\">Catatan:</span>                 <p className=\"font-medium mt-1\">{goat.notes || \"Tidak ada catatan tersedia\"}</p>               </div>               <div className=\"flex justify-between\">                 <span className=\"text-muted-foreground\">Dibuat</span>                 <span className=\"font-medium\">{dateformat(goat.created_at)}</span>               </div>               <div className=\"flex justify-between\">                 <span className=\"text-muted-foreground\">Terakhir Diperbarui</span>                 <span className=\"font-medium\">{dateformat(goat.updated_at)}</span>               </div>             </div>           </div>         </div>          {selectedPhoto && (           <div             className=\"fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4\"             onClick={() => setSelectedPhoto(null)}           >             <div className=\"relative max-w-4xl max-h-full\">               <img                 src={selectedPhoto || \"/placeholder.svg\"}                 alt=\"Foto kambing diperbesar\"                 className=\"max-w-full max-h-full object-contain rounded-lg\"               />               <Button                 variant=\"outline\"                 size=\"icon\"                 className=\"absolute top-4 right-4 bg-white/90 hover:bg-white\"                 onClick={() => setSelectedPhoto(null)}               >                 <ArrowLeft className=\"h-4 w-4 rotate-45\" />               </Button>             </div>           </div>         )}       </div>     </AppLayout>   ) }  export default GoatDetailView",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2080,
        2896
      ],
      "id": "b7942e10-2223-4b23-afcd-ea7911ecefa7",
      "name": "detail1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2512,
        2912
      ],
      "id": "caa34cc5-e5dd-479b-8ed1-0aa9d9c5c725",
      "name": "Merge6"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2816,
        2896
      ],
      "id": "6f5c5de5-403a-4791-8f99-06a8fe16ee10",
      "name": "Merge7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "typeContent",
              "value": "export interface Goat {   id: number;   code: string;   type: {     id: number;     type_name: string;   };   status: {     id: number;     status_name: string;   };   category: {     id: number;     category_name: string;   };   gender: string;   birth_date: string;   location: string;   notes: string;   image_path: string;   condition: {     id: number;     condition_name: string;   };   room: {     id: number;     room_name: string;   };   created_at: string;   updated_at: string; }   export type GoatFormInitialValues = {   code: string;   type_id: number;   status_id: number;   category_id: number;   gender: string;   birth_date: Date | undefined;   location: string;   notes: string;   condition_id: number;   image_path: File[] | undefined; // Updated to File array   mother_id: number;   father_id: number;   characteristics: string;   breeding_id: number;   room_id: number;   farm_id: number;   is_sale: boolean;   is_sold: boolean; };  export const GoatFormInitialValue: GoatFormInitialValues = {   code: \"\",   type_id: 0,   status_id: 0,   category_id: 0,   gender: \"\",   birth_date: undefined,   location: \"\",   notes: \"\",   condition_id: 0,   image_path: [],   mother_id: 0,   father_id: 0,   characteristics: \"\",   breeding_id: 0,   room_id: 0,   farm_id: 0,   is_sale: false,   is_sold: false, };",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2080,
        3104
      ],
      "id": "8eb21c02-bd94-4121-99a7-4b55366475d5",
      "name": "type"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2512,
        3136
      ],
      "id": "6248f499-6614-4632-9e9c-8bb6fda6da11",
      "name": "Merge Type1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "ReuseblaFormContent",
              "value": "import { Formik, Form, Field, type FormikValues } from \"formik\"; import { toFormikValidationSchema } from \"zod-formik-adapter\"; import { Input } from \"@/components/ui/input\"; import { Textarea } from \"@/components/ui/textarea\"; import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from \"@/components/ui/select\"; import type { ChangeEvent } from \"react\"; import { useEffect, useState } from \"react\"; import ImagePreview from \"./ImagePreview\"; import { asFileArray, asStringArray, convertCommaToDot } from \"@/lib/utils\"; import { MultiSelect } from \"@/components/ui/multi-select\"; import { type ReusableFormProps } from \"@/types/form\"; import { InputDate } from \"../InputDate\";  export default function ReusableForm<T extends FormikValues>({   initialValues,   sections,   schema,   onSubmit,   onCancel,   onChangePerInput,   submitText,   cancelText,   loading,   className,   errors: externalErrors, }: ReusableFormProps<T>) {   const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);   // Cleanup function untuk URL.createObjectURL   const cleanupObjectURLs = (files: File[]) => {     files.forEach(file => {       if (file.type.startsWith('image/')) {         URL.revokeObjectURL(URL.createObjectURL(file));       }     });   };    // Cleanup effect saat komponen unmount   useEffect(() => {     return () => {       // Cleanup semua object URLs saat komponen unmount       sections.forEach(section => {         section.fields.forEach(field => {           if (field.type === 'file' || field.type === 'file-multiple') {             const fieldValue = initialValues[field.name];             if (fieldValue && Array.isArray(fieldValue)) {               cleanupObjectURLs(fieldValue);             }           }         });       });     };   }, []);    return (     <Formik<T>       initialValues={initialValues as T}       enableReinitialize={true}       validationSchema={schema ? toFormikValidationSchema(schema) : undefined}       onSubmit={onSubmit}     >       {({ errors: formikErrors, touched, values, handleChange, isSubmitting, setFieldValue }) => {         const handleChangeInput = (item: ChangeEvent, type: string) => {           const target = (item as any).target;            // Convert comma to dot for number fields           if (type === 'number' && target.value) {             target.value = convertCommaToDot(target.value);           }            onChangePerInput && onChangePerInput({ input: target, type });           handleChange(item as any);         };          const handleFileChange = (fieldName: string, files: File[]) => {           // Cleanup previous object URLs if any           const newFiles = Array.from(files);           setUploadedFiles(newFiles); // Replace current files           setFieldValue(fieldName, newFiles); // Update Formik           onChangePerInput?.({             input: { name: fieldName, value: newFiles },             type: 'file',           });         };         return (           <Form className={`space-y-6 ${className ?? \"\"}`}>             {sections?.map((section, idx) => (               <div key={idx} className=\"space-y-4\">                 {section.title && <h3 className=\"font-semibold text-lg\">{section.title}</h3>}                 {section.fields?.map((field) => {                   const error =                     touched[field.name as string] &&                     (formikErrors[field.name as string] as string);                   const externalError = externalErrors?.[field.name as string];                   const finalError = externalError || (error as string | undefined);                    switch (field.type) {                     case \"text\":                     case \"number\":                     case \"password\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           <label className=\"block text-sm font-medium\">                             {field.label}                           </label>                           <Input                             type={field.type}                             name={String(field.name)}                             value={field.type === 'number' ? convertCommaToDot(values[String(field.name)]) : values[String(field.name)]}                             onChange={(e) => handleChangeInput(e as any, field.type)}                             placeholder={field.placeholder}                             disabled={field.disabled}                             className={field.className}                           />                           {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                         </div>                       );                      case \"date\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           <label className=\"block text-sm font-medium\">                             {field.label}                           </label>                           <InputDate                             name={String(field.name)}                             value={values[String(field.name)]}                             disabled={field.disabled}                             className={field.className}                             onChangePerInput={onChangePerInput}                           />                           {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                         </div>                       )                      case \"file\":                     case \"file-multiple\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           <label className=\"block text-sm font-medium\">                             {field.label}                           </label>                           <Input                             type=\"file\"                             name={String(field.name)}                             accept={field.accept}                             multiple={field.type === \"file-multiple\" || field.multiple}                             onChange={(e) => {                               const target = e.target as HTMLInputElement;                               const files = target.files;                               if (files) {                                 const fileArray = Array.from(files);                                 handleFileChange(String(field.name), fileArray);                               }                             }}                             placeholder={field.placeholder}                             disabled={field.disabled}                             className={field.className}                           />                           {Array.isArray(values[String(field.name)]) && values[String(field.name)].length > 0 && (                             <div className=\"text-sm text-muted-foreground\">                               {values[String(field.name)].length} file(s) selected                             </div>                           )}                            {/* Image Preview Section */}                           <ImagePreview                             images={[                               ...asFileArray(values[field.name]),                               ...asStringArray(initialValues[field.name])                             ]}                             onRemove={(index) => {                               const totalInitialUrls = asStringArray(initialValues[field.name]).length;                                if (index < totalInitialUrls) {                                 console.log(\"Mark remote image for deletion:\", asStringArray(initialValues[field.name])[index]);                               } else {                                 const fileIndex = index - totalInitialUrls;                                 const newFiles = uploadedFiles.filter((_, i) => i !== fileIndex);                                 setUploadedFiles(newFiles);                                 setFieldValue(String(field.name), newFiles);                               }                             }}                           />                            {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                         </div>                       );                      case \"textarea\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           <label className=\"block text-sm font-medium\">                             {field.label}                           </label>                           <Textarea                             name={field.name as string}                             value={values[String(field.name)]}                             onChange={(e) => handleChangeInput(e as any, field.type)}                             placeholder={field.placeholder}                             disabled={field.disabled}                             className={field.className}                           />                           {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                         </div>                       );                      case \"select\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           <label className=\"block text-sm font-medium\">                             {field.label}                           </label>                           <Select                             disabled={field.disabled}                             value={String(values[String(field.name)])}                             onValueChange={(val) => {                               let parsed: string | number = val;                               if (!isNaN(Number(val)) && val.trim() !== \"\") {                                 parsed = parseInt(val, 10);                               }                               const syntheticEvent = {                                 target: { name: field.name, value: parsed }                               };                               handleChangeInput(syntheticEvent as any, field.type);                             }}                           >                             <SelectTrigger>                               <SelectValue placeholder={field.placeholder || \"Select\"} />                             </SelectTrigger>                             <SelectContent>                               {field.options?.map((opt) => (                                 <SelectItem                                   key={String(opt.value)}                                   value={String(opt.value)}                                 >                                   {opt.label}                                 </SelectItem>                               ))}                             </SelectContent>                           </Select>                           {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                         </div>                       );                      case \"select-multiple\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           <label className=\"block text-sm font-medium\">{field.label}</label>                           <MultiSelect                             options={field.options as { label: string; value: string }[]}                             selected={values[String(field.name)] || []}                             onChange={(selected) => {                               setFieldValue(String(field.name), selected)                             }}                             disabled={field.disabled}                             placeholder={field.placeholder || \"Pilih...\"}                           />                           {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                         </div>                       )                      case \"input-group\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           {field.label && (                             <label className=\"block text-sm font-medium\">{field.label}</label>                           )}                           <div className=\"flex gap-2\">                             {field.inputGroup?.map((opt) => (                               <div key={String(opt.name)} className=\"flex flex-col\">                                 <Input                                   type={opt.type}                                   name={String(opt.name)}                                   value={values[String(opt.name)] ?? \"\"}                                   onChange={(e) => handleChangeInput(e as any, opt.type)}                                   placeholder={opt.placeholder}                                   disabled={opt.disabled}                                   className={opt.className}                                 />                               </div>                             ))}                           </div>                         </div>                       );                     case \"checkbox\":                       return (                         <div key={String(field.name)} className=\"flex items-center gap-2\">                           <Field                             type=\"checkbox\"                             name={field.name as string}                             checked={values[String(field.name)] as unknown as boolean}                           />                           <label>{field.label}</label>                           {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                         </div>                       );                      default:                       return null;                   }                 })}               </div>             ))}             {externalErrors?.submit && (               <p className=\"text-sm text-destructive\">{externalErrors.submit}</p>             )}             <div className=\"flex items-center gap-2\">               <button                 type=\"submit\"                 className=\"bg-primary cursor-pointer text-white px-4 py-2 rounded-md\"                 disabled={loading || isSubmitting}               >                 {isSubmitting || loading ? \"Saving...\" : (submitText ?? \"Save\")}               </button>               {onCancel && (                 <button                   type=\"button\"                   className=\"px-4 py-2 cursor-pointer rounded-md border\"                   onClick={onCancel}                   disabled={loading || isSubmitting}                 >                   {cancelText ?? \"Cancel\"}                 </button>               )}             </div>           </Form>         );       }}     </Formik>   ); }",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2080,
        3328
      ],
      "id": "ced51644-b840-4eab-bcc2-c04e09228860",
      "name": "Reusable Form1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "reusableTableContent",
              "value": "// src/components/shared/ReusableTable/ReusableTable.tsx import {   Table,   TableBody,   TableCell,   TableHead,   TableHeader,   TableRow, } from \"@/components/ui/table\"; import { Button } from \"@/components/ui/button\"; import { Card, CardContent, CardHeader } from \"@/components/ui/card\"; // --- Impor Pagination Components --- import {   Pagination,   PaginationContent,   PaginationEllipsis,   PaginationItem,   PaginationLink,   PaginationNext,   PaginationPrevious, } from \"@/components/ui/pagination\"; import type {   TableColumn,   TableAction,   ReusableTableProps, } from \"@/types/table\"; import { useState, useEffect } from \"react\"; // Tambahkan useState dan useEffect import { PaginationInitial } from \"@/types/page\";  const ReusableTable = <T extends { id: number }>({   data,   columns,   actions = [],   loading = false,   onRowClick,   emptyState,   className = \"\",   onClickGoToPage,   pagination = PaginationInitial,   itemsPerPage = 10, // --- Prop baru untuk jumlah item per halaman --- }: ReusableTableProps<T> & { itemsPerPage?: number }) => {   // --- Extend props type ---   // --- State untuk pagination ---   const [currentPage, setCurrentPage] = useState(pagination.page);    const totalPages = pagination.total_pages;   useEffect(() => {     if (currentPage > totalPages && totalPages > 0) {       setCurrentPage(totalPages);     } else if (totalPages === 0) {       setCurrentPage(1); // Reset ke halaman 1 jika tidak ada data     }   }, [data.length, totalPages, currentPage]);    // --- Hitung data untuk halaman saat ini ---   const startIndex = (currentPage - 1) * itemsPerPage;    // --- Handler untuk perubahan halaman ---   const goToPage = (page: number) => {     // Validasi input halaman     const newPage = Math.max(1, Math.min(page, totalPages));     if (newPage !== currentPage) {       onClickGoToPage && onClickGoToPage(newPage)       setCurrentPage(newPage);     }   };    // --- Handler untuk halaman berikutnya/sebelumnya ---   const nextPage = () => {     goToPage(currentPage + 1)   };   const prevPage = () => {     goToPage(currentPage - 1)   };    // --- Render skeleton loading ---   if (loading) {     return (       <Card className={className}>         <CardHeader>           <div className=\"h-6 bg-gray-200 rounded animate-pulse w-1/4\"></div>         </CardHeader>         <CardContent>           {[1, 2, 3].map((i) => (             <div               key={i}               className=\"h-12 bg-gray-100 rounded mb-2 animate-pulse\"             ></div>           ))}           {/* --- Skeleton untuk Pagination --- */}           <div className=\"flex items-center justify-between px-2 py-4\">             <div className=\"h-4 bg-gray-200 rounded w-32 animate-pulse\"></div>             <div className=\"flex space-x-2\">               {[1, 2, 3, 4].map((i) => (                 <div                   key={i}                   className=\"h-8 w-8 bg-gray-200 rounded animate-pulse\"                 ></div>               ))}             </div>             <div className=\"h-4 bg-gray-200 rounded w-32 animate-pulse\"></div>           </div>         </CardContent>       </Card>     );   }    // --- Render empty state ---   if (data.length === 0 && emptyState) {     return <div className={className}>{emptyState}</div>;   }    return (     <Card className={className}>       <CardContent className=\"p-0\">         <Table>           <TableHeader>             <TableRow>               <TableHead className=\"text-left\">No</TableHead>               {columns.map((column: TableColumn<T>, index: number) => (                 <TableHead key={index} className={column.className}>                   {column.header}                 </TableHead>               ))}               {actions.length > 0 && (                 <TableHead className=\"text-right\">Aksi</TableHead>               )}             </TableRow>           </TableHeader>           <TableBody>             {data.length > 0 ? (               data.map((item: T, index: number) => (                 <TableRow                   key={item.id}                   onClick={() => onRowClick?.(item)}                   className={                     onRowClick ? \"cursor-pointer hover:bg-gray-50\" : \"\"                   }                 >                   <TableCell>{startIndex + index + 1}</TableCell>                   {columns.map((column: TableColumn<T>, colIndex: number) => (                     <TableCell key={colIndex} className={column.className}>                       {typeof column.accessor === \"function\"                         ? column.accessor(item)                         : String(item[column.accessor as keyof T] ?? \"-\")}                     </TableCell>                   ))}                   {actions.length > 0 && (                     <TableCell className=\"text-right\">                       <div className=\"flex justify-end gap-2\">                         {actions.map(                           (action: TableAction<T>, actionIndex: number) => (                             <Button                               key={actionIndex}                               variant={action.variant || \"outline\"}                               size=\"sm\"                               onClick={(e) => {                                 e.stopPropagation();                                 action.onClick(item);                               }}                             >                               {action.icon}                               {action.label}                             </Button>                           )                         )}                       </div>                     </TableCell>                   )}                 </TableRow>               ))             ) : (               // --- Jika tidak ada data untuk halaman ini (seharusnya tidak terjadi karena pengecekan di useEffect) ---               <TableRow>                 <TableCell                   colSpan={columns.length + (actions.length > 0 ? 1 : 0)}                   className=\"text-center py-8 text-gray-500\"                 >                   No data available for this page.                 </TableCell>               </TableRow>             )}           </TableBody>         </Table>          {/* --- Render pesan jika data kosong (sebelum pagination) --- */}         {data.length === 0 && !emptyState && (           <div className=\"p-8 text-center text-gray-500\">No data available</div>         )}          {/* --- Render Pagination jika ada lebih dari 1 halaman --- */}         {totalPages > 1 && (           <div className=\"border-t px-4 py-3 flex items-center justify-between\">             <div className=\"text-sm text-muted-foreground\">               Menampilkan <span className=\"font-medium\">{startIndex + 1}</span>{\" \"}               sampai {\"\"}               <span className=\"font-medium\">                 {data.length + startIndex}               </span>{\" \"}               {\"\"}               dari <span className=\"font-medium\">{pagination.total_items}</span> entri             </div>             <Pagination>               <PaginationContent>                 <PaginationItem>                   <PaginationPrevious                     href=\"#\"                     onClick={(e) => {                       e.preventDefault();                       if (currentPage > 1) prevPage();                     }}                     aria-disabled={currentPage === 1}                     className={                       currentPage === 1 ? \"pointer-events-none opacity-50\" : \"\"                     }                   />                 </PaginationItem>                  {/* --- Logika sederhana untuk menampilkan nomor halaman --- */}                 {/* Tampilkan halaman 1 */}                 <PaginationItem>                   <PaginationLink                     href=\"#\"                     onClick={(e) => {                       e.preventDefault();                       goToPage(1);                     }}                     isActive={currentPage === 1}                   >                     1                   </PaginationLink>                 </PaginationItem>                  {/* Ellipsis jika halaman saat ini > 3 */}                 {currentPage > 3 && (                   <PaginationItem>                     <PaginationEllipsis />                   </PaginationItem>                 )}                  {/* Halaman sebelum saat ini */}                 {currentPage > 2 && (                   <PaginationItem>                     <PaginationLink                       href=\"#\"                       onClick={(e) => {                         e.preventDefault();                         goToPage(currentPage - 1);                       }}                     >                       {currentPage - 1}                     </PaginationLink>                   </PaginationItem>                 )}                  {/* Halaman saat ini (jika bukan 1 atau terakhir) */}                 {currentPage !== 1 && currentPage !== totalPages && (                   <PaginationItem>                     <PaginationLink                       href=\"#\"                       onClick={(e) => {                         e.preventDefault();                         // Tidak perlu aksi, ini adalah halaman saat ini                       }}                       isActive                     >                       {currentPage}                     </PaginationLink>                   </PaginationItem>                 )}                  {/* Halaman setelah saat ini */}                 {currentPage < totalPages - 1 && (                   <PaginationItem>                     <PaginationLink                       href=\"#\"                       onClick={(e) => {                         e.preventDefault();                         goToPage(currentPage + 1);                       }}                     >                       {currentPage + 1}                     </PaginationLink>                   </PaginationItem>                 )}                  {/* Ellipsis jika halaman saat ini < totalPages - 2 */}                 {currentPage < totalPages - 2 && (                   <PaginationItem>                     <PaginationEllipsis />                   </PaginationItem>                 )}                  {/* Tampilkan halaman terakhir jika totalPages > 1 */}                 {totalPages > 1 && (                   <PaginationItem>                     <PaginationLink                       href=\"#\"                       onClick={(e) => {                         e.preventDefault();                         goToPage(totalPages);                       }}                       isActive={currentPage === totalPages}                     >                       {totalPages}                     </PaginationLink>                   </PaginationItem>                 )}                  <PaginationItem>                   <PaginationNext                     href=\"#\"                     onClick={(e) => {                       e.preventDefault();                       if (currentPage < totalPages) nextPage();                     }}                     aria-disabled={currentPage === totalPages}                     className={                       currentPage === totalPages                         ? \"pointer-events-none opacity-50\"                         : \"\"                     }                   />                 </PaginationItem>               </PaginationContent>             </Pagination>           </div>         )}       </CardContent>     </Card>   ); };  export default ReusableTable;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2080,
        3536
      ],
      "id": "4557b843-9c75-4b59-b47d-0eb061f26b32",
      "name": "Reusable Table1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "reusableAlertContent",
              "value": "import { useEffect } from \"react\"; import { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"; import { CheckCircle2Icon, XCircleIcon } from \"lucide-react\";  type AlertType = \"success\" | \"error\";  interface ReusableAlertProps {   type: AlertType;   title: string;   description: string;   duration?: number; // default 2000 ms   onClose: () => void; }  export default function ReusableAlert({   type,   title,   description,   duration = 3000,   onClose, }: ReusableAlertProps) {   // Auto close setelah duration   useEffect(() => {     const timer = setTimeout(() => {       onClose();     }, duration);     return () => clearTimeout(timer);   }, [duration, onClose]);    return (     <div className=\"fixed top-4 right-4 w-96 z-50 animate-in fade-in duration-300\">       <Alert         className={`flex items-center ${type === \"success\" ? \"bg-green-100\" : \"bg-red-100\"           }`}       >         {type === \"success\" ? (           <CheckCircle2Icon color=\"#00c950\" />         ) : (           <XCircleIcon color=\"#fb2c36\" />         )}         <div>           <AlertTitle             className={`${type === \"success\" ? \"text-green-500\" : \"text-red-500\"               }`}           >             {title}           </AlertTitle>           <AlertDescription>{description}</AlertDescription>         </div>       </Alert>     </div>   ); }",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2080,
        3760
      ],
      "id": "1cbb96a2-2718-4b44-8784-08fde1e517ad",
      "name": "Reusable Alert1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "reusableModalContent",
              "value": "import {   Dialog,   DialogContent,   DialogHeader,   DialogTitle,   DialogDescription,   DialogFooter,   DialogClose, } from \"@/components/ui/dialog\"; import { Button } from \"@/components/ui/button\"; import { AlertTriangle, CheckCircle, Info } from \"lucide-react\"; import { cn } from \"@/lib/utils\";  // Tipe untuk modal variant export type ModalVariant =   | \"default\"   | \"confirm\"   | \"delete\"   | \"success\"   | \"warning\"   | \"info\";  // Props untuk ReusableModal export interface ReusableModalProps {   isOpen: boolean;   title: string;   description?: string;   children: React.ReactNode;   onConfirm?: () => void;   onCancel?: () => void;   confirmText?: string;   cancelText?: string;   variant?: ModalVariant;   isLoading?: boolean;   showCloseButton?: boolean;   className?: string; }  const ReusableModal = ({   isOpen,   title,   description,   children,   onConfirm,   onCancel,   confirmText = \"Confirm\",   cancelText = \"Cancel\",   variant = \"default\",   isLoading = false,   showCloseButton = true,   className = \"\", }: ReusableModalProps) => {   // Dapatkan konfigurasi berdasarkan variant   const getVariantConfig = () => {     const configs = {       default: {         icon: null,         confirmVariant: \"default\" as const,         titleClass: \"\",       },       confirm: {         icon: <CheckCircle className=\"h-5 w-5 text-green-500\" />,         confirmVariant: \"default\" as const,         titleClass: \"\",       },       delete: {         icon: <AlertTriangle className=\"h-5 w-5 text-red-500\" />,         confirmVariant: \"destructive\" as const,         titleClass: \"text-red-500\",       },       success: {         icon: <CheckCircle className=\"h-5 w-5 text-green-500\" />,         confirmVariant: \"default\" as const,         titleClass: \"text-green-500\",       },       warning: {         icon: <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />,         confirmVariant: \"default\" as const,         titleClass: \"text-yellow-500\",       },       info: {         icon: <Info className=\"h-5 w-5 text-blue-500\" />,         confirmVariant: \"default\" as const,         titleClass: \"text-blue-500\",       },     };      return configs[variant];   };    const config = getVariantConfig();    return (     <Dialog       open={isOpen}       onOpenChange={(open) => {         if (!open && onCancel) {           onCancel();         }       }}     >       <DialogContent className={cn(\"sm:max-w-[425px]\", className)}>         {/* Header dengan icon dan close button */}         <DialogHeader className=\"relative\">           <div className=\"flex items-center gap-3\">             {config.icon && <div className=\"flex-shrink-0\">{config.icon}</div>}             <div>               <DialogTitle className={cn(config.titleClass)}>                 {title}               </DialogTitle>               {description && (                 <DialogDescription>{description}</DialogDescription>               )}             </div>           </div>            {showCloseButton && (             <DialogClose               onClick={onCancel}               className=\"absolute right-0 top-0 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"             >               <span className=\"sr-only\">Close</span>             </DialogClose>           )}         </DialogHeader>          {/* Konten modal */}         <div className=\"py-4\">{children}</div>          {/* Footer dengan tombol aksi */}         {(onConfirm || onCancel) && (           <DialogFooter className=\"gap-2\">             {onCancel && (               <Button variant=\"outline\" onClick={onCancel} disabled={isLoading}>                 {cancelText}               </Button>             )}             {onConfirm && (               <Button                 variant={config.confirmVariant}                 onClick={onConfirm}                 disabled={isLoading}               >                 {isLoading ? \"Processing...\" : confirmText}               </Button>             )}           </DialogFooter>         )}       </DialogContent>     </Dialog>   ); };  export default ReusableModal;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2080,
        3968
      ],
      "id": "cbad7ce9-409a-4a74-8d36-1875d489e5c9",
      "name": "Reusable Modal1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2512,
        3328
      ],
      "id": "d2a746d5-66d7-441d-be94-1f5d1dc8357b",
      "name": "Merge Component4"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2512,
        3536
      ],
      "id": "60af0796-ca27-4889-acad-cc98f109ddda",
      "name": "Merge Component5"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2512,
        3760
      ],
      "id": "f2df1651-d567-4b77-8d12-19ac49adeab0",
      "name": "Merge Component6"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2512,
        3968
      ],
      "id": "d5721903-3fcb-47a0-ad92-2afa2efb5f34",
      "name": "Merge Component7"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3408,
        2592
      ],
      "id": "c48a8140-b6d0-4b43-8d38-15a5506a1b0d",
      "name": "Merge9"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var schemaContent = $json.schemaContent\nvar formContent = $json.formContent\nvar listContent = $json.listContent\nvar detailContent = $json.detailContent\nvar actionContent = $json.actionContent\nvar typeContent = $json.typeContent\nvar reusableFormContent = $json.ReuseblaFormContent\nvar reusableTableContent = $json.reusableTableContent\nvar reusableAlertContent = $json.reusableAlertContent\nvar reusableModalContent = $json.reusableModalContent\n\n\nconst systemMessage = `\nYou are an AI Assistant designed specifically to help developers with coding, architecture suggestions, debugging, and providing clear technical explanations. You may also engage in casual conversation.\n\n## Behavior Rules\n\n### 1. For General Coding Questions\nIf the user asks for:\n- Explanations (e.g., \"What is useEffect?\")\n- Debugging help (e.g., \"Why is my code crashing?\")\n- Code reviews, optimization, or best practices\n- Any non-generation request\n\n→ Respond **normally**, in a helpful, conversational tone.\n→ Use markdown if needed (code blocks, lists, etc.).\n→ **Do NOT use [writeFileVico] format.**\n→ Provide clear, accurate, and beginner-friendly explanations when appropriate.\n\n---\n\n### 2. For Model or Page Generation Requests\nIf the user explicitly asks to:\n- \"Generate a model\"\n- \"Generate a page\"\n- \"Create a page\"\n- \"Build CRUD for X\"\n- \"Make a form for user\"\n\n→ First, **check if the schema or requirements are complete**:\n   - Are all fields defined?\n   - Are types, validations, relationships clear?\n   - If not, **ask the user to clarify**.\n   - Do not generate anything until complete.\n\n→ If complete, respond **only** with the structured block:\n\n[writeFileVico]\nname: <folder_name_in_snake_case>\nschema: <filename.schema.ts>\n\\`\\`\\`ts\n${schemaContent}\n\\`\\`\\`\n\nform: <ComponentNameForm.tsx>\n\\`\\`\\`tsx\n${formContent}\n\\`\\`\\`\n\ntable: <ComponentNameList.tsx>\n\\`\\`\\`tsx\n${listContent}\n\\`\\`\\`\n\ndetail: <ComponentNameDetailView.tsx>\n\\`\\`\\`tsx\n${detailContent}\n\\`\\`\\`\n\naction: <filename.action.ts>\n\\`\\`\\`ts\n${actionContent}\n\\`\\`\\`\n\ntype: <filename.ts>\n\\`\\`\\`ts\n${typeContent}\n\\`\\`\\`\n\n⚠️ Rules for this format:\n- Only use this block **after schema is confirmed complete**.\n- Do not add any text before or after the block.\n- Never generate code manually — placeholders like \\`${schemaContent}\\` will be filled by the system.\n- Keep the order: name → schema → form → table → detail → action → type.\n- Use triple backticks with language tags: \\`\\`\\`ts or \\`\\`\\`tsx.\n\nthis is components U should training and not to be generate, because it already exists on code base:\nReusableAlert.tsx:\n\\`\\`\\`ts\n${reusableAlertContent}\n\\`\\`\\`\n\nReusableForm.tsx:\n\\`\\`\\`ts\n${reusableFormContent}\n\\`\\`\\`\n\nReusableTable.tsx:\n\\`\\`\\`ts\n${reusableTableContent}\n\\`\\`\\`\n\nReusableModal.tsx:\n\\`\\`\\`ts\n${reusableModalContent}\n\\`\\`\\`\n\n---\n\n## Summary\n- ✅ For general help: answer naturally.\n- ✅ For generation: \n   - Use strict [writeFileVico] format only when schema is confirmed complete.\n   - If the project clearly uses React + Vite, follow the provided template components.\n   - If the workspace does NOT use React + Vite (or looks different), IGNORE the template and use the user's own workspace structure as reference.\n- ✅ Generate file based on user workspace.\n- ❌ Never force [writeFileVico] on non-generation requests.\n- ❌ Never generate incomplete or guessed code.\n\nYour flexibility makes you a powerful assistant for both learning and automation.\n`;\n\nvar data = {\n  systemMessage\n}\n\nreturn data"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3120,
        2560
      ],
      "id": "2163b17a-8c43-47f0-9e03-e65de3e14aed",
      "name": "System Message1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "176b32ab-5005-4302-a649-b2d0c9072784",
              "name": "token",
              "value": "={{ $json.body.token }}",
              "type": "string"
            },
            {
              "id": "1b7f8f1d-44be-4b36-8d44-fb81b71ea93a",
              "name": "workspaces",
              "value": "={{ $json.body.workspaces }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        128,
        7200
      ],
      "id": "cc8df699-7225-42c0-ae7f-c980ebb8ddac",
      "name": "Edit Fields8"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "workspace",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -160,
        7200
      ],
      "id": "e74c8166-a981-4346-8d6f-9220a4e28a93",
      "name": "Update Workspaces",
      "webhookId": "3550630d-559c-4b2c-8ddf-271d2e991964"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "68bf801d-5258-442e-bd46-2a3d2036dc11",
              "name": "message",
              "value": "=true",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2416,
        7200
      ],
      "id": "644c7005-47c8-46b9-860c-c8113b1ad36e",
      "name": "Edit Fields9"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1728,
        7408
      ],
      "id": "74806f90-7ccd-435f-8eca-ad0a223b2853",
      "name": "Simple Memory5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a91594e7-8476-487d-81f1-1e0f0dba72ee",
              "name": "sessionId",
              "value": "={{ $json.sessionId }}",
              "type": "string"
            },
            {
              "id": "2b89faf5-a313-4c02-99f5-1673b04bffd2",
              "name": "systemMessage",
              "value": "={{ $json.systemMessage }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1472,
        7184
      ],
      "id": "453f5936-79b8-46af-b043-18e0e0f2c2c7",
      "name": "Edit Fields10"
    },
    {
      "parameters": {
        "mode": "insert",
        "messages": {
          "messageValues": [
            {
              "message": "={{ $json.systemMessage }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        1840,
        7200
      ],
      "id": "fb48c77e-12e2-48eb-8eb5-39d0ebd66e3d",
      "name": "Save Chat1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var userId = $('login').item.json.body.email\nvar sessionId = $('login').item.json.body.token\nvar data = {\n  userId,\n  sessionId\n}\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2192,
        144
      ],
      "id": "1a657e0c-bb82-46f2-94d8-79abf4618ddf",
      "name": "Code8"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        2496,
        352
      ],
      "id": "4e3a3821-bad8-473c-9a11-d97eb9975db9",
      "name": "Simple Memory6"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        2416,
        144
      ],
      "id": "4bc0eb0d-517a-4ac9-a9e2-a53468072620",
      "name": "Chat Memory Manager1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var messages = $json.messages || [];\n\n// Batasi riwayat pesan\nif (messages.length > 20) {\n  messages = messages.slice(-20);\n}\n\nvar newMessages = [];\nvar systemMessages = 0;\n\nmessages.forEach((item) => {\n  // Hitung pesan system yang mengandung teks tertentu\n  if (item.system && item.system.includes(\"You are an AI Assistant designed specifically to help developers\")) {\n    systemMessages++;\n  }\n\n  if (item.human) {\n    newMessages.push({\n      role: \"user\",\n      content: item.human\n    });\n  }\n  if (item.ai) {\n    newMessages.push({\n      role: \"assistant\",\n      content: item.ai\n    });\n  }\n});\n\nvar data = {\n  systemCount: systemMessages,\n  messages: newMessages\n};\n\nreturn data;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3152,
        192
      ],
      "id": "8b16452b-b085-4d31-9e49-11c1c06b84ef",
      "name": "Code9"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2864,
        96
      ],
      "id": "dd65d792-d2d7-47dc-ac08-8d401e777182",
      "name": "Merge10"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3376,
        -32
      ],
      "id": "7d766ba4-b14e-4a76-b8df-4724e182b4b0",
      "name": "Merge11"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a3e5507b-04c8-41dd-939d-f508b6468d75",
              "leftValue": "={{ $json.systemCount }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3776,
        64
      ],
      "id": "30af3f07-4398-4200-85a7-8064bab75e6f",
      "name": "If"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var workspaces = $json.workspaces\n\n\nvar newMessages = []\n\nnewMessages.push({\n  role: \"system\",\n  content:\n      `Analyze the workspace files and create a concise code overview.\n\nFor each file:\n1. Output only the key classes, functions, methods, and exported constants.\n2. Show full signatures (names, parameters, return types if available).\n3. Do NOT include internal logic, comments, test helpers, dummy data, or boilerplate.\n4. Preserve all names and file paths exactly as they appear — no renaming.\n5. The output must remain syntactically valid code and maintain the original folder/file structure.\n6. Do not invent or add missing code — only summarize what exists.\n7. Separate the output clearly for each file to retain per-file context.\n\nWorkspace content:\n${workspaces}\n    `\n});\n\n\nvar data = {\n  openai: { \n    json: {\n      model: \"gpt-4o-mini\",\n      messages: newMessages,\n      max_tokens: 10000  // misal 100 token (sekitar 70–80 kata)\n    }\n  }\n}\n\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        7056
      ],
      "id": "1063fe14-865c-40e2-b572-d09216379bbb",
      "name": "Code11"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.openai.json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        736,
        7040
      ],
      "id": "a23ecf77-9d71-441c-b799-25baff9e5b5a",
      "name": "OpenAI Chat2",
      "credentials": {
        "openAiApi": {
          "id": "3fZqwOF47IelEJ1h",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1248,
        7216
      ],
      "id": "56905a8b-3e76-4494-95d6-29e985195097",
      "name": "Merge Component8"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var workspaces = $json.choices[0].message.content\nvar sessionId = $json.token\nconst systemMessage = `\nThe following is the user's project workspace. (note: only a sampled subset of files is shown, not the full project)\n\nUse this as reference context when generating code, pages, or models:\n- Focus on identifying the main classes, functions, types, and overall data flow.\n- Keep naming and structure consistent with the existing project files.\n- Follow the same coding style, framework conventions, and folder organization.\n- Do not overfit to specific implementations — treat this as structural guidance.\n- Avoid re-implementing internal logic unless explicitly required.\n\nSampled workspace content:\n${workspaces}\n\n(This is a high-level overview of the project — for guidance only, not the full codebase.)\n\n`;\n\nvar data = {\n  sessionId,\n  systemMessage\n}\n\nreturn data"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1072,
        7072
      ],
      "id": "9dc05e91-7910-44b0-8956-41ba1c3fb7f3",
      "name": "System Message3"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        912,
        7408
      ],
      "id": "3755eaf8-3c3b-4e49-9bcb-13a993834a69",
      "name": "Merge Component9"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var userId = $('Code8').item.json.userId\nvar token = $('Code8').item.json.sessionId\n\n\n\nvar data = {\n  userId,\n  token\n}\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4688,
        -208
      ],
      "id": "3fda9113-a6d0-4aa2-9b94-e33e6e50d44d",
      "name": "Code12"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var userId = $('Code').item.json.userId\nvar token = $('Code').item.json.token\n\n\n\nvar data = {\n  userId,\n  token\n}\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4896,
        80
      ],
      "id": "b15efabc-06b3-42b1-92e5-0c574f35ebbf",
      "name": "Code13"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "11b612ae-a892-434b-91d7-4158b022f147",
              "name": "userId",
              "value": "={{ $json.userId }}",
              "type": "string"
            },
            {
              "id": "8bce3a28-30eb-4c30-a90e-6525a1357a11",
              "name": "token",
              "value": "={{ $json.token }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5360,
        -160
      ],
      "id": "fdbf752b-d6a9-462c-b1f5-c102bc635e8a",
      "name": "Edit Fields11"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        3408,
        5328
      ],
      "id": "d5f9c093-8895-4f21-a0ee-4fd957cbdea4",
      "name": "Simple Memory7"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        3312,
        5120
      ],
      "id": "7df4e976-204f-44d9-94f8-4194d1da95ef",
      "name": "Get chat Memory1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "schemaContent",
              "value": "import { z } from \"zod\";  export const goatSchema = z.object({   code: z.string({ required_error: \"Kode harus diisi\" }),   type_id: z.number().min(1, \"Tipe harus diisi\"),   status_id: z.number().min(1, \"Status harus diisi\"),   category_id: z.number().min(1, \"Kategori harus diisi\"),   gender: z.string({ required_error: \"Gender harus diisi\" }),   birth_date: z.coerce.date({     required_error: \"Tanggal lahir harus diisi\",     invalid_type_error: \"Tanggal lahir tidak valid\"   }),   location: z.string({ required_error: \"Lokasi harus diisi\" }),   notes: z.string().optional(),   condition_id: z.number().min(1, \"Kondisi harus diisi\"),   image_path: z.any().optional(),   mother_id: z.number().optional(),   father_id: z.number().optional(),   characteristics: z.string().optional(),   breeding_id: z.number().optional(),   room_id: z.number().optional(),   farm_id: z.number().optional(),   is_sale: z.boolean(),   is_sold: z.boolean(), });  export type GoatSchemaType = z.infer<typeof goatSchema>;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1072,
        4320
      ],
      "id": "dec75981-4fb9-4259-ac92-fb0b780df1d1",
      "name": "schema2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1520,
        4432
      ],
      "id": "95b453ce-3066-428c-94b3-7bb284f90c8c",
      "name": "Merge12"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1520,
        4720
      ],
      "id": "80e8e223-e2d6-43a4-9646-cebc111df4ee",
      "name": "Merge13"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "actionContent",
              "value": "import api from \"@/lib/axiosInstance\";  const GoatAction = {   async get(page?: number) {     const response = await api.get(\"/goats\", {       params: { page },     });     return response;   },    async create(formData: any) {     const response = await api.post(\"/goats\", formData);     return response;   },    async detail(goatId: number) {     const response = await api.get(`/goats/${goatId}`);     return response;   },    async update(goatId: number, formData: any) {     const response = await api.put(`/goats/${goatId}`, formData);     return response;   },    async delete(goatId: number) {     const response = await api.delete(`/goats/${goatId}`);     return response;   }, };  export default GoatAction;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1072,
        4528
      ],
      "id": "29aec48a-b37b-496e-95d3-88cb246eb235",
      "name": "action2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "formContent",
              "value": "import { useState, useEffect } from \"react\"; import { useNavigate, useParams } from \"react-router-dom\"; import ReusableForm from \"@/components/shared/ReusableForm/ReusableForm\"; import ReusableModal from \"@/components/shared/ReusableModal/ReusableModal\"; import { Button } from \"@/components/ui/button\"; import { ArrowLeft } from \"lucide-react\"; import AppLayout from \"@/AppLayout\"; import { goatSchema, type GoatSchemaType } from \"@/validations/goat.schema\"; import GlobalAction from \"@/actions/global.action\"; import GoatAction from \"@/actions/goat.action\"; import { parseDate } from \"@/lib/formatter\"; import { GoatFormInitialValue, type GoatFormInitialValues } from \"@/types/goats\"; import useStore from \"@/store\"; import type { FieldType, FormSection } from \"@/types/form\";  const GoatForm = () => {   const navigate = useNavigate();   const { farmStore } = useStore()   const { id } = useParams();   const isEdit = Boolean(id);   const [isLoading, setIsLoading] = useState({ isGoatByGender: false });   const [isSubmitting, setIsSubmitting] = useState(false);   const [showSuccessModal, setShowSuccessModal] = useState(false);   const [categories, setCategories] = useState([]);   const [conditions, setConditions] = useState([]);   const [farms, setFarms] = useState([]);   const [statuses, setStatuses] = useState([]);   const [types, setTypes] = useState([]);   const [cages, setCages] = useState([]);   const [breedings, setBreedings] = useState([]);   const [existingGoat, setExistingGoat] = useState<GoatFormInitialValues>();   const [maleGoats, setMaleGoats] = useState([]);   const [femaleGoats, setFemaleGoats] = useState([]);   const [initialValues, setInitialValues] = useState<GoatFormInitialValues>(     {       ...GoatFormInitialValue,       location: farmStore.location,       farm_id: farmStore.id     });    useEffect(() => {     fetchCategories()     fetchConditions()     fetchFarms()     fetchStatuses()     fetchTypes()     fetchCages()     fetchBreeding()     fetchGoatByGender()   }, [])    useEffect(() => {     if (id) {       fetchDetail()     }   }, [id])    useEffect(() => {     if (!id && farmStore.id) {       setInitialValues((prev) => ({         ...prev,         location: farmStore.location,         farm_id: farmStore.id,       }))     }      if (existingGoat && femaleGoats.length && maleGoats.length) {       setInitialValues({         code: existingGoat.code || \"\",         type_id: existingGoat.type_id || 0,         status_id: existingGoat.status_id ?? 0,         category_id: existingGoat.category_id ?? 0,         gender: existingGoat.gender ? convertGender(existingGoat.gender) : \"\",         birth_date: existingGoat.birth_date ? parseDate(String(existingGoat.birth_date)) ?? undefined : undefined,         location: existingGoat.location || \"\",         notes: existingGoat.notes || \"\",         condition_id: existingGoat.condition_id ?? 0,         image_path: existingGoat.image_path ? [existingGoat.image_path as any] : [],         mother_id: existingGoat.mother_id || 0,         father_id: existingGoat.father_id || 0,         characteristics: existingGoat.characteristics || \"\",         breeding_id: existingGoat.breeding_id || 0,         room_id: existingGoat.room_id || 0,         farm_id: existingGoat.farm_id || 0,         is_sale: existingGoat.is_sale || false,         is_sold: existingGoat.is_sold || false,       });     }   }, [farmStore.id, id, isLoading.isGoatByGender, existingGoat, femaleGoats.length, maleGoats.length]);     function convertGender(gender: string) {     if (gender.toLocaleUpperCase().trim() === \"BETINA\") return \"female\";     else return \"male\"   }    const fetchGoatByGender = async () => {     setIsLoading({ isGoatByGender: true })     try {       const femaleGoat = await GlobalAction.goatByGender(\"female\")       const maleGoat = await GlobalAction.goatByGender(\"male\")       if (femaleGoat.status === 200 && maleGoat.status === 200) {         const dataMaleGoat = maleGoat.data.data         const mappingMaleGoat = dataMaleGoat.map((item: any) => ({           value: item.id,           label: `${item.code} - ${item.type.type_name}`         }))         const dataFemaleGoat = femaleGoat.data.data         const mappingFemaleGoat = dataFemaleGoat.map((item: any) => ({           value: item.id,           label: `${item.code} - ${item.type.type_name}`         }))         setMaleGoats(mappingMaleGoat)         setFemaleGoats(mappingFemaleGoat)         setIsLoading({ isGoatByGender: false })       }     } catch (error) {       console.error(error);     }   }     const fetchCategories = async () => {     try {       const response = await GlobalAction.category()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.category_name         }))         setCategories(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchDetail = async () => {     try {       const goatId = id ? parseInt(id) : 0       const response = await GoatAction.detail(goatId)       if (response.status === 200) {         const data = response.data.data         setExistingGoat(data)       }     } catch (error) {       console.error(error);     }   }    const fetchConditions = async () => {     try {       const response = await GlobalAction.condition()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.condition_name         }))         setConditions(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchFarms = async () => {     try {       const response = await GlobalAction.farm()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.name         }))         setFarms(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchStatuses = async () => {     try {       const response = await GlobalAction.status()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.status_name         }))         setStatuses(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchTypes = async () => {     try {       const response = await GlobalAction.type()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.type_name         }))         setTypes(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchCages = async () => {     try {       const response = await GlobalAction.cages()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           value: item.id,           label: item.room_name         }))         setCages(mapping)       }     } catch (error) {       console.error(error);     }   }    const fetchBreeding = async () => {     try {       const response = await GlobalAction.breeding()       if (response.status == 200) {         const data = response.data.data         const mapping = data.map((item: any) => ({           ...item,           value: item.id,           label: `Jantan ${item.maleGoat?.code} (${item.maleGoat?.type?.type_name}) - Betina ${item.femaleGoat?.code} (${item.femaleGoat?.type?.type_name}) `         }))         setBreedings(mapping)       }     } catch (error) {       console.error(error);     }   }    const handleSubmit = async (values: any) => {     setIsSubmitting(true);     const result = goatSchema.safeParse(values);     if (result.success) {       try {         const formData = new FormData();         Object.entries(result.data).forEach(([key, value]) => {           if (value !== undefined && value !== null) {             formData.append(key, String(value));           }         });          if (values.image_path && Array.isArray(values.image_path)) {           values.image_path.forEach((file: File) => {             formData.append(\"image\", file);           });           formData.delete(\"image_path\");         }          const response = id ? await GoatAction.update(parseInt(id), formData) : await GoatAction.create(formData)         if (response.status === 201 || response.status === 200) {           setShowSuccessModal(true);         }         console.log(\"Validation successful, data is valid\");       } catch (error) {         console.error(\"Error saving goat:\", error);       }     } else {       console.error(\"Validation failed:\", result.error);     }     setIsSubmitting(false);   };    const handleCancel = () => navigate(\"/goats\");   const handleSuccessConfirm = () => {     setShowSuccessModal(false);     navigate(\"/goats\");   };    const sections: FormSection<GoatSchemaType>[] = [     {       title: \"Informasi Dasar\",       fields: [         { name: \"code\" as keyof GoatSchemaType, label: \"Kode Kambing\", type: \"text\" as const },         {           name: \"type_id\" as keyof GoatSchemaType,           label: \"Tipe\",           type: \"select\" as const,           options: types,         },         {           name: \"status_id\" as keyof GoatSchemaType,           label: \"Status\",           type: \"select\" as const,           options: statuses,         },         {           name: \"category_id\" as keyof GoatSchemaType,           label: \"Kategori\",           type: \"select\" as const,           options: categories,         },         {           name: \"gender\" as keyof GoatSchemaType,           label: \"Jenis Kelamin\",           type: \"select\" as const,           options: [             { value: \"male\", label: \"Jantan\" },             { value: \"female\", label: \"Betina\" },           ],         },         { name: \"birth_date\" as keyof GoatSchemaType, label: \"Tanggal Lahir\", type: \"date\" },       ],     },     {       title: \"Detail & Karakteristik\",       fields: [         { name: \"location\" as keyof GoatSchemaType, label: \"Lokasi\", type: \"text\" as const, disabled: true },         { name: \"notes\" as keyof GoatSchemaType, label: \"Catatan\", type: \"textarea\" as const },         {           name: \"condition_id\" as keyof GoatSchemaType,           label: \"Kondisi\",           type: \"select\" as const,           options: conditions,         },         {           name: \"image_path\" as keyof GoatSchemaType,           label: \"Foto\",           type: \"file\" as const,           accept: \".png,.jpg,.jpeg\",         },         { name: \"characteristics\" as keyof GoatSchemaType, label: \"Ciri Khas\", type: \"textarea\" as const },       ],     },     {       title: \"Relasi & Breeding\",       fields: [         {           name: \"breeding_id\" as keyof GoatSchemaType,           label: \"Breeding\",           type: \"select\" as const,           options: breedings         },         {           name: \"mother_id\" as keyof GoatSchemaType,           label: \"ID Induk Betina\",           type: \"select\" as const,           disabled: true,           options: femaleGoats         },         {           name: \"father_id\" as keyof GoatSchemaType,           label: \"ID Induk Jantan\",           type: \"select\" as const,           disabled: true,           options: maleGoats         },         {           name: \"room_id\" as keyof GoatSchemaType,           label: \"Kandang\",           type: \"select\" as const,           options: cages         },         {           name: \"farm_id\" as keyof GoatSchemaType,           label: \"Farm\",           type: \"select\" as const,           disabled: true,           options: farms         },       ],     },     {       title: \"Status Penjualan\",       fields: [         { name: \"is_sale\" as keyof GoatSchemaType, label: \"Dijual?\", type: \"checkbox\" as const },         { name: \"is_sold\" as keyof GoatSchemaType, label: \"Sudah Terjual?\", type: \"checkbox\" as const },       ],     },   ];     const handleChangeInput = ({     input,   }: {     input: { name: string; value: any };     type: FieldType;   }) => {     const { name, value } = input;      setInitialValues((prev: GoatFormInitialValues) => {       const getField = (sectionIndex: number, fieldIndex: number) =>         sections[sectionIndex]?.fields[fieldIndex]?.name;        const simpleFieldUpdates: Record<string, keyof GoatFormInitialValues> = {         [getField(0, 0)]: 'code',         [getField(0, 1)]: 'type_id',         [getField(0, 2)]: 'status_id',         [getField(0, 3)]: 'category_id',         [getField(0, 4)]: 'gender',         [getField(0, 5)]: 'birth_date',         [getField(1, 0)]: 'location',         [getField(1, 1)]: 'notes',         [getField(1, 2)]: 'condition_id',         [getField(1, 3)]: 'image_path',         [getField(1, 4)]: 'characteristics',         [getField(2, 3)]: 'room_id',         [getField(3, 0)]: 'is_sale',         [getField(3, 1)]: 'is_sold',       };        const targetKey = simpleFieldUpdates[name];       if (targetKey) {         return { ...prev, [targetKey]: value };       }        if (name === getField(2, 0)) {         const breeding: any = breedings.find((b: any) => b.id === Number(value));          return {           ...prev,           breeding_id: value,           mother_id: breeding?.female_id ?? null,           father_id: breeding?.male_id ?? null,         };       }        return prev;     });   };    return (     <AppLayout       breadcrumbItems={         isEdit           ? [             { title: \"Kambing\", href: \"/goats\" },             { title: \"Edit Kambing\" },           ]           : [             { title: \"Kambing\", href: \"/goats\" },             { title: \"Tambahkan Kambing\" },           ]       }     >       <div className=\"space-y-6\">         <div className=\"flex items-center gap-3\">           <Button variant=\"outline\" size=\"icon\" onClick={() => navigate(\"/goats\")}>             <ArrowLeft className=\"h-4 w-4\" />           </Button>           <div>             <h1 className=\"text-3xl font-bold\">               {isEdit ? \"Edit Kambing\" : \"Tambahkan Kambing\"}             </h1>           </div>         </div>          <ReusableForm<GoatSchemaType>           sections={sections}           initialValues={initialValues}           onChangePerInput={handleChangeInput}           onSubmit={handleSubmit}           onCancel={handleCancel}           submitText={isEdit ? \"Perbarui\" : \"Tambah\"}           cancelText=\"Batal\"           loading={isSubmitting}           schema={goatSchema}         />          <ReusableModal           isOpen={showSuccessModal}           title={isEdit ? \"Kambing Diperbarui!\" : \"Kambing Ditambahkan!\"}           description={isEdit ? \"Informasi berhasil diperbarui.\" : \"Data berhasil ditambahkan.\"}           variant=\"success\"           confirmText=\"OK\"           onConfirm={handleSuccessConfirm}         >           <div className=\"text-center py-4\">             <p className=\"text-sm text-muted-foreground\">               Anda akan dialihkan ke daftar kambing.             </p>           </div>         </ReusableModal>       </div>     </AppLayout>   ); };  export default GoatForm;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1072,
        4704
      ],
      "id": "376c06ba-1bd7-4ca5-a27f-bdf392010679",
      "name": "form2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "listContent",
              "value": "import { useState, useEffect } from \"react\"; import { useNavigate } from \"react-router-dom\"; import ReusableTable from \"@/components/shared/ReusableTable/ReusableTable\"; import ReusableModal from \"@/components/shared/ReusableModal/ReusableModal\"; import ReusableAlert from \"@/components/shared/ReusableAlert/ReusableAlert\"; import { type Goat } from \"@/types/goats\"; import { Button } from \"@/components/ui/button\"; import { Pencil, Trash2, Eye, Plus, Filter, X } from \"lucide-react\"; import type { TableColumn, TableAction } from \"@/types/table\"; import AppLayout from \"@/AppLayout\"; import { Input } from \"@/components/ui/input\"; import { Label } from \"@/components/ui/label\"; import {   Select,   SelectContent,   SelectItem,   SelectTrigger,   SelectValue, } from \"@/components/ui/select\"; import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"; import GoatAction from \"@/actions/goat.action\"; import { calculateAgeInMonths, dateformat } from \"@/lib/formatter\"; import GlobalAction from \"@/actions/global.action\"; import { PaginationInitial, type Pagination } from \"@/types/page\";  const GoatList = () => {   const navigate = useNavigate();   const [goats, setGoats] = useState<Goat[]>([]);   const [femaleGoats, setFemaleGoats] = useState([]);   const [maleGoats, setMaleGoats] = useState([]);   const [paginations, setPaginations] = useState<Pagination>(PaginationInitial);    useEffect(() => {     fetchGoats();     fetchGoatByGender()   }, []);    const fetchGoatByGender = async () => {     try {       const femaleGoat = await GlobalAction.goatByGender(\"female\")       const maleGoat = await GlobalAction.goatByGender(\"male\")       if (femaleGoat.status === 200 && maleGoat.status === 200) {         const dataMaleGoat = maleGoat.data.data         const mappingMaleGoat = dataMaleGoat.map((item: any) => ({           value: item.id,           label: `${item.code} - ${item.type.type_name} - ${item.category.category_name}`         }))         const dataFemaleGoat = femaleGoat.data.data         const mappingFemaleGoat = dataFemaleGoat.map((item: any) => ({           value: item.id,           label: `${item.code} - ${item.type.type_name} - ${item.category.category_name}`         }))         setMaleGoats(mappingMaleGoat)         setFemaleGoats(mappingFemaleGoat)       }     } catch (error) {       console.error(error);     }   }     const fetchGoats = async (page?: number) => {     try {       const response = await GoatAction.get(page);       if (response.status == 200) {         setGoats(response.data.data);         response.data?.pagination && setPaginations(response.data.pagination)       }     } catch (error) {       console.error(error);     }   };    const handleGotoPage = (page: number) => {     fetchGoats(page)   }     // 🔧 State untuk filter   const [filters, setFilters] = useState({     code: \"\",     type: \"\",     status: \"\",     gender: \"\",     minAge: \"\",     maxAge: \"\",   });    // 🔧 State untuk menampilkan filter card   const [showFilter, setShowFilter] = useState(false);    const [deleteModal, setDeleteModal] = useState<{     isOpen: boolean;     goat: Goat | null;   }>({     isOpen: false,     goat: null,   });    // 🔧 Handler untuk mengubah filter   const handleFilterChange = (field: string, value: string) => {     setFilters((prev) => ({       ...prev,       [field]: value,     }));   };    // 🔧 Handler untuk reset filter   const resetFilters = () => {     setFilters({       code: \"\",       type: \"\",       status: \"\",       gender: \"\",       minAge: \"\",       maxAge: \"\",     });   };    const handleEdit = (goat: Goat) => {     navigate(`/goats/${goat.id}/edit`);   };    const handleDelete = (goat: Goat) => {     setDeleteModal({       isOpen: true,       goat: goat,     });   };    const handleDeleteCancel = () => {     setDeleteModal({       isOpen: false,       goat: null,     });   };    const handleView = (goat: Goat) => {     navigate(`/goats/${goat.id}/view`);   };    const handleAddNew = () => {     navigate(\"/goats/new\");   };   const columns: TableColumn<Goat>[] = [     { header: \"Kode\", accessor: (goat: Goat) => goat.code },     {       header: \"Tipe\",       accessor: (goat: Goat) => goat.type.type_name,     },     {       header: \"Status\",       accessor: (goat: Goat) => goat.status.status_name,     },     { header: \"Jenis Kelamin\", accessor: \"gender\" },     {       header: \"Usia (bulan)\",       accessor: (goat: Goat) => calculateAgeInMonths(goat.birth_date),     },     {       header: \"Tanggal lahir\",       accessor: (goat: Goat) => dateformat(goat.birth_date),     },     { header: \"Lokasi\", accessor: \"location\" },   ];    const actions: TableAction<Goat>[] = [     {       label: \"Detail\",       onClick: handleView,       variant: \"outline\",       icon: <Eye className=\"h-4 w-4 mr-2\" />,     },     {       label: \"Edit\",       onClick: handleEdit,       variant: \"default\",       icon: <Pencil className=\"h-4 w-4 mr-2\" />,     },     {       label: \"Hapus\",       onClick: handleDelete,       variant: \"destructive\",       icon: <Trash2 className=\"h-4 w-4 mr-2\" />,     },   ];    // Calculate statistics   const totalGoats = paginations.total_items || goats.length;   const JantanGoats = maleGoats.length;   const BetinaGoats = femaleGoats.length;    const [alertData, setAlertData] = useState<{     type: \"success\" | \"error\";     title: string;     description: string;   } | null>(null);    const handleDeleteConfirm = async () => {     if (!deleteModal.goat) return;      try {       const response = await GoatAction.delete(deleteModal.goat.id);       if (response.status === 200) {         setGoats((prevGoats) =>           prevGoats.filter((goat) => goat.id !== deleteModal.goat?.id)         );         setDeleteModal({ isOpen: false, goat: null });         setAlertData({           type: \"success\",           title: \"Berhasil\",           description: \"Kambing berhasil dihapus.\",         });       }     } catch (error) {       console.error(\"Failed to delete goat:\", error);       setAlertData({         type: \"error\",         title: \"Gagal\",         description: \"Terjadi kesalahan saat menghapus kambing.\",       });     }   };    return (     <AppLayout       breadcrumbItems={[         { title: \"Kambing\", href: \"/goats\" },         { title: \"Manajemen Kambing\" },       ]}     >       <div className=\"space-y-6\">         <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4\">           <div>             <h1 className=\"text-3xl font-bold\">Manajemen Kambing</h1>             <p className=\"text-muted-foreground\">               Kelola inventaris dan informasi kambing Anda             </p>           </div>           <div className=\"flex gap-2\">             <Button               variant={showFilter ? \"default\" : \"outline\"}               onClick={() => setShowFilter(!showFilter)}             >               <Filter className=\"h-4 w-4 mr-2\" />               {showFilter ? \"Tutup Pencarian\" : \"Cari\"}             </Button>             <Button onClick={handleAddNew}>               <Plus className=\"h-4 w-4 mr-2\" />               Tambah Data Kambing             </Button>           </div>         </div>          {/* 🔧 Filter Card */}         {showFilter && (           <Card>             <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">               <CardTitle>Filter Goats</CardTitle>               <Button                 variant=\"ghost\"                 size=\"icon\"                 onClick={() => setShowFilter(false)}                 className=\"h-6 w-6 p-0\"               >                 <X className=\"h-4 w-4\" />               </Button>             </CardHeader>             <CardContent className=\"space-y-4\">               <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4\">                 <div className=\"space-y-2\">                   <Label>Kode Kambing</Label>                   <Input                     value={filters.code}                     onChange={(e) => handleFilterChange(\"code\", e.target.value)}                     placeholder=\"Cari berdasarkan kode\"                   />                 </div>                  <div className=\"space-y-2\">                   <Label>Tipe</Label>                   <Select                     value={filters.type || undefined}                     onValueChange={(value) =>                       handleFilterChange(                         \"type\",                         value === \"__semua__\" ? \"\" : value                       )                     }                   >                     <SelectTrigger>                       <SelectValue placeholder=\"Pilih tipe\" />                     </SelectTrigger>                     <SelectContent>                       <SelectItem value=\"__semua__\">Semua Tipe</SelectItem>                       <SelectItem value=\"boer\">Boer</SelectItem>                       <SelectItem value=\"local\">Local</SelectItem>                       <SelectItem value=\"cross\">Cross Breed</SelectItem>                     </SelectContent>                   </Select>                 </div>                  <div className=\"space-y-2\">                   <Label>Status</Label>                   <Select                     value={filters.status || undefined}                     onValueChange={(value) =>                       handleFilterChange(                         \"status\",                         value === \"__semua__\" ? \"\" : value                       )                     }                   >                     <SelectTrigger>                       <SelectValue placeholder=\"Pilih status\" />                     </SelectTrigger>                     <SelectContent>                       <SelectItem value=\"__semua__\">All Status</SelectItem>                       <SelectItem value=\"aktif\">Aktif</SelectItem>                       <SelectItem value=\"pembiakan\">Pembiakan</SelectItem>                       <SelectItem value=\"terjual\">Terjual</SelectItem>                       <SelectItem value=\"sakit\">Sakit</SelectItem>                     </SelectContent>                   </Select>                 </div>                  <div className=\"space-y-2\">                   <Label>Gender</Label>                   <Select                     value={filters.gender || undefined}                     onValueChange={(value) =>                       handleFilterChange(                         \"gender\",                         value === \"__semua__\" ? \"\" : value                       )                     }                   >                     <SelectTrigger>                       <SelectValue placeholder=\"Pilih jenis kelamin\" />                     </SelectTrigger>                     <SelectContent>                       <SelectItem value=\"__semua__\">                         All Jenis Kelamin                       </SelectItem>                       <SelectItem value=\"Jantan\">Jantan</SelectItem>                       <SelectItem value=\"Betina\">Betina</SelectItem>                     </SelectContent>                   </Select>                 </div>                  <div className=\"space-y-2\">                   <Label>Usia Minimum (bulan)</Label>                   <Input                     type=\"number\"                     placeholder=\"0\"                     value={filters.minAge}                     onChange={(e) =>                       handleFilterChange(\"minAge\", e.target.value)                     }                   />                 </div>                  <div className=\"space-y-2\">                   <Label>Usia Maksimal (months)</Label>                   <Input                     type=\"number\"                     placeholder=\"100\"                     value={filters.maxAge}                     onChange={(e) =>                       handleFilterChange(\"maxAge\", e.target.value)                     }                   />                 </div>               </div>                <div className=\"flex justify-end gap-2\">                 <Button variant=\"outline\" onClick={resetFilters}>                   Atur Ulang                 </Button>               </div>             </CardContent>           </Card>         )}          {/* Statistics Cards */}         <div className=\"grid gap-4 md:grid-cols-3\">           <Card>             <CardHeader className=\"pb-2\">               <CardTitle className=\"text-sm font-medium\">                 Total Kambing               </CardTitle>             </CardHeader>             <CardContent>               <div className=\"text-2xl font-bold\">{totalGoats}</div>               <p className=\"text-xs text-muted-foreground\">Dalam inventaris</p>             </CardContent>           </Card>           <Card>             <CardHeader className=\"pb-2\">               <CardTitle className=\"text-sm font-medium\">                 Kambing Jantan               </CardTitle>             </CardHeader>             <CardContent>               <div className=\"text-2xl font-bold\">{JantanGoats}</div>               <p className=\"text-xs text-muted-foreground\">Ekor</p>             </CardContent>           </Card>           <Card>             <CardHeader className=\"pb-2\">               <CardTitle className=\"text-sm font-medium\">                 Kambing Betina               </CardTitle>             </CardHeader>             <CardContent>               <div className=\"text-2xl font-bold\">{BetinaGoats}</div>               <p className=\"text-xs text-muted-foreground\">Ekor</p>             </CardContent>           </Card>         </div>          <ReusableTable           data={goats}           columns={columns}           actions={actions}           pagination={paginations}           onClickGoToPage={handleGotoPage}           emptyState={             <div className=\"text-center py-12\">               <h3 className=\"text-lg font-medium mb-2\">                 Tidak ada kambing ditemukan               </h3>               {/* <p className=\"text-muted-foreground mb-4\">                 {filteredGoats.length === 0 && goats.length > 0                   ? \"Tidak ada kambing yang sesuai dengan kriteria pencarian Anda\"                   : \"Mulailah dengan menambahkan kambing pertama Anda\"}               </p> */}               <Button onClick={handleAddNew}>                 <Plus className=\"h-4 w-4 mr-2\" />                 Tambah Kambing Pertama               </Button>             </div>           }         />          {/* Delete Confirmation Modal */}         <ReusableModal           isOpen={deleteModal.isOpen}           title=\"Hapus Kambing\"           description={`Apakah Anda yakin ingin menghapus kambing ${deleteModal.goat?.code}? Tindakan ini tidak dapat dibatalkan.`}           variant=\"delete\"           confirmText=\"Hapus\"           cancelText=\"Batal\"           onConfirm={handleDeleteConfirm}           onCancel={handleDeleteCancel}         >           <div className=\"text-sm text-muted-foreground\">             <p>Ini akan menghapus kambing secara permanen dari sistem Anda.</p>           </div>         </ReusableModal>          {alertData && (           <ReusableAlert             type={alertData.type}             title={alertData.title}             description={alertData.description}             onClose={() => setAlertData(null)}           />         )}       </div>     </AppLayout>   ); };  export default GoatList;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1072,
        4880
      ],
      "id": "6674e534-2ed5-48ab-b9da-72c053268371",
      "name": "list2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "detailContent",
              "value": "\"use client\"  import { useNavigate, useParams } from \"react-router-dom\" import { Button } from \"@/components/ui/button\" import { ArrowLeft, Pencil, ZoomIn } from \"lucide-react\" import type { Goat } from \"@/types/goats\" import AppLayout from \"@/AppLayout\" import { useEffect, useState } from \"react\" import GoatAction from \"@/actions/goat.action\" import { dateformat } from \"@/lib/formatter\"  const GoatDetailView = () => {   const navigate = useNavigate()   const { id } = useParams()   const [goat, setGoat] = useState<Goat>()   const [selectedPhoto, setSelectedPhoto] = useState<string | null>(null)    useEffect(() => {     fetchDetail()   }, [])    const fetchDetail = async () => {     try {       const goatId = id ? Number.parseInt(id) : 0       const response = await GoatAction.detail(goatId)       if (response.status === 200) {         const data = response.data.data         setGoat(data)       }     } catch (error) {       console.error(error)     }   }    if (!goat) {     return (       <AppLayout breadcrumbItems={[{ title: \"Goats\", href: \"/goats\" }, { title: \"Detail Kambing\" }]}>         <div className=\"space-y-6\">           <div className=\"flex items-center gap-3\">             <Button variant=\"outline\" size=\"icon\" onClick={() => navigate(\"/goats\")}>               <ArrowLeft className=\"h-4 w-4\" />             </Button>             <h1 className=\"text-3xl font-bold\">Detail Kambing</h1>           </div>           <p className=\"text-muted-foreground\">Kambing yang Anda cari tidak ada.</p>         </div>       </AppLayout>     )   }    const handleEdit = () => {     navigate(`/goats/${goat.id}/edit`)   }    return (     <AppLayout breadcrumbItems={[{ title: \"Goats\", href: \"/goats\" }, { title: \"Detail Kambing\" }]}>       <div className=\"space-y-6\">         <div className=\"flex items-center justify-between\">           <div className=\"flex items-center gap-3\">             <Button variant=\"outline\" size=\"icon\" onClick={() => navigate(\"/goats\")}>               <ArrowLeft className=\"h-4 w-4\" />             </Button>             <div>               <h1 className=\"text-3xl font-bold\">Detail Kambing</h1>               <p className=\"text-muted-foreground\">Lihat informasi kambing</p>             </div>           </div>           <Button onClick={handleEdit}>             <Pencil className=\"h-4 w-4 mr-2\" />             Edit Kambing           </Button>         </div>           <div className=\"grid gap-6 md:grid-cols-2\">           <div className=\"rounded-lg border p-6\">             <h2 className=\"text-xl font-semibold mb-4\">Galeri Foto</h2>             <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">               <div                 className=\"group relative aspect-[4/3] overflow-hidden rounded-lg border bg-muted cursor-pointer transition-all hover:shadow-md\"                 onClick={() => setSelectedPhoto(goat.image_path)}               >                 <img                   src={goat.image_path || \"/placeholder.svg\"}                   className=\"h-full w-full object-cover transition-transform group-hover:scale-105\"                 />                 <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors flex items-center justify-center\">                   <ZoomIn className=\"h-6 w-6 text-white opacity-0 group-hover:opacity-100 transition-opacity\" />                 </div>               </div>             </div>           </div>           <div className=\"space-y-6\">             <div className=\"rounded-lg border p-6\">               <h2 className=\"text-xl font-semibold mb-4\">Informasi Dasar</h2>               <div className=\"space-y-4\">                 <div className=\"flex justify-between\">                   <span className=\"text-muted-foreground\">Kode</span>                   <span className=\"font-medium\">{goat.code}</span>                 </div>                 <div className=\"flex justify-between\">                   <span className=\"text-muted-foreground\">Jenis</span>                   <span className=\"font-medium\">{goat.type?.type_name}</span>                 </div>                 <div className=\"flex justify-between\">                   <span className=\"text-muted-foreground\">Jenis Kelamin</span>                   <span className=\"font-medium\">{goat.gender}</span>                 </div>                 <div className=\"flex justify-between\">                   <span className=\"text-muted-foreground\">Tanggal Lahir</span>                   <span className=\"font-medium\">{dateformat(goat.birth_date)}</span>                 </div>               </div>             </div>           </div>         </div>          <div className=\"rounded-lg border p-6\">           <h2 className=\"text-xl font-semibold mb-4\">Informasi Status</h2>           <div className=\"space-y-4\">             <div className=\"flex justify-between\">               <span className=\"text-muted-foreground\">Status</span>               <span className=\"font-medium\">{goat.status?.status_name}</span>             </div>             <div className=\"flex justify-between\">               <span className=\"text-muted-foreground\">Lokasi</span>               <span className=\"font-medium\">{goat.location}</span>             </div>           </div>         </div>         <div className=\"space-y-6\">           <div className=\"rounded-lg border p-6\">             <h2 className=\"text-xl font-semibold mb-4\">Informasi Tambahan</h2>             <div className=\"space-y-4\">               <div>                 <span className=\"text-muted-foreground\">Catatan:</span>                 <p className=\"font-medium mt-1\">{goat.notes || \"Tidak ada catatan tersedia\"}</p>               </div>               <div className=\"flex justify-between\">                 <span className=\"text-muted-foreground\">Dibuat</span>                 <span className=\"font-medium\">{dateformat(goat.created_at)}</span>               </div>               <div className=\"flex justify-between\">                 <span className=\"text-muted-foreground\">Terakhir Diperbarui</span>                 <span className=\"font-medium\">{dateformat(goat.updated_at)}</span>               </div>             </div>           </div>         </div>          {selectedPhoto && (           <div             className=\"fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4\"             onClick={() => setSelectedPhoto(null)}           >             <div className=\"relative max-w-4xl max-h-full\">               <img                 src={selectedPhoto || \"/placeholder.svg\"}                 alt=\"Foto kambing diperbesar\"                 className=\"max-w-full max-h-full object-contain rounded-lg\"               />               <Button                 variant=\"outline\"                 size=\"icon\"                 className=\"absolute top-4 right-4 bg-white/90 hover:bg-white\"                 onClick={() => setSelectedPhoto(null)}               >                 <ArrowLeft className=\"h-4 w-4 rotate-45\" />               </Button>             </div>           </div>         )}       </div>     </AppLayout>   ) }  export default GoatDetailView",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1072,
        5072
      ],
      "id": "efe08f8c-afee-452d-acb2-c7aefb56283a",
      "name": "detail2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1504,
        5088
      ],
      "id": "5d53e6aa-a610-492e-b816-9831f87ffc5e",
      "name": "Merge14"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1808,
        5072
      ],
      "id": "b4d29e6f-4bc7-4eb7-bb65-1fd84bf1a145",
      "name": "Merge15"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "typeContent",
              "value": "export interface Goat {   id: number;   code: string;   type: {     id: number;     type_name: string;   };   status: {     id: number;     status_name: string;   };   category: {     id: number;     category_name: string;   };   gender: string;   birth_date: string;   location: string;   notes: string;   image_path: string;   condition: {     id: number;     condition_name: string;   };   room: {     id: number;     room_name: string;   };   created_at: string;   updated_at: string; }   export type GoatFormInitialValues = {   code: string;   type_id: number;   status_id: number;   category_id: number;   gender: string;   birth_date: Date | undefined;   location: string;   notes: string;   condition_id: number;   image_path: File[] | undefined; // Updated to File array   mother_id: number;   father_id: number;   characteristics: string;   breeding_id: number;   room_id: number;   farm_id: number;   is_sale: boolean;   is_sold: boolean; };  export const GoatFormInitialValue: GoatFormInitialValues = {   code: \"\",   type_id: 0,   status_id: 0,   category_id: 0,   gender: \"\",   birth_date: undefined,   location: \"\",   notes: \"\",   condition_id: 0,   image_path: [],   mother_id: 0,   father_id: 0,   characteristics: \"\",   breeding_id: 0,   room_id: 0,   farm_id: 0,   is_sale: false,   is_sold: false, };",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1072,
        5280
      ],
      "id": "e086386b-0bb8-4e35-8950-98750f8314dd",
      "name": "type2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1504,
        5312
      ],
      "id": "0ae7d30f-2a3a-4363-98cf-15fb7118667a",
      "name": "Merge Type2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "ReuseblaFormContent",
              "value": "import { Formik, Form, Field, type FormikValues } from \"formik\"; import { toFormikValidationSchema } from \"zod-formik-adapter\"; import { Input } from \"@/components/ui/input\"; import { Textarea } from \"@/components/ui/textarea\"; import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from \"@/components/ui/select\"; import type { ChangeEvent } from \"react\"; import { useEffect, useState } from \"react\"; import ImagePreview from \"./ImagePreview\"; import { asFileArray, asStringArray, convertCommaToDot } from \"@/lib/utils\"; import { MultiSelect } from \"@/components/ui/multi-select\"; import { type ReusableFormProps } from \"@/types/form\"; import { InputDate } from \"../InputDate\";  export default function ReusableForm<T extends FormikValues>({   initialValues,   sections,   schema,   onSubmit,   onCancel,   onChangePerInput,   submitText,   cancelText,   loading,   className,   errors: externalErrors, }: ReusableFormProps<T>) {   const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);   // Cleanup function untuk URL.createObjectURL   const cleanupObjectURLs = (files: File[]) => {     files.forEach(file => {       if (file.type.startsWith('image/')) {         URL.revokeObjectURL(URL.createObjectURL(file));       }     });   };    // Cleanup effect saat komponen unmount   useEffect(() => {     return () => {       // Cleanup semua object URLs saat komponen unmount       sections.forEach(section => {         section.fields.forEach(field => {           if (field.type === 'file' || field.type === 'file-multiple') {             const fieldValue = initialValues[field.name];             if (fieldValue && Array.isArray(fieldValue)) {               cleanupObjectURLs(fieldValue);             }           }         });       });     };   }, []);    return (     <Formik<T>       initialValues={initialValues as T}       enableReinitialize={true}       validationSchema={schema ? toFormikValidationSchema(schema) : undefined}       onSubmit={onSubmit}     >       {({ errors: formikErrors, touched, values, handleChange, isSubmitting, setFieldValue }) => {         const handleChangeInput = (item: ChangeEvent, type: string) => {           const target = (item as any).target;            // Convert comma to dot for number fields           if (type === 'number' && target.value) {             target.value = convertCommaToDot(target.value);           }            onChangePerInput && onChangePerInput({ input: target, type });           handleChange(item as any);         };          const handleFileChange = (fieldName: string, files: File[]) => {           // Cleanup previous object URLs if any           const newFiles = Array.from(files);           setUploadedFiles(newFiles); // Replace current files           setFieldValue(fieldName, newFiles); // Update Formik           onChangePerInput?.({             input: { name: fieldName, value: newFiles },             type: 'file',           });         };         return (           <Form className={`space-y-6 ${className ?? \"\"}`}>             {sections?.map((section, idx) => (               <div key={idx} className=\"space-y-4\">                 {section.title && <h3 className=\"font-semibold text-lg\">{section.title}</h3>}                 {section.fields?.map((field) => {                   const error =                     touched[field.name as string] &&                     (formikErrors[field.name as string] as string);                   const externalError = externalErrors?.[field.name as string];                   const finalError = externalError || (error as string | undefined);                    switch (field.type) {                     case \"text\":                     case \"number\":                     case \"password\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           <label className=\"block text-sm font-medium\">                             {field.label}                           </label>                           <Input                             type={field.type}                             name={String(field.name)}                             value={field.type === 'number' ? convertCommaToDot(values[String(field.name)]) : values[String(field.name)]}                             onChange={(e) => handleChangeInput(e as any, field.type)}                             placeholder={field.placeholder}                             disabled={field.disabled}                             className={field.className}                           />                           {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                         </div>                       );                      case \"date\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           <label className=\"block text-sm font-medium\">                             {field.label}                           </label>                           <InputDate                             name={String(field.name)}                             value={values[String(field.name)]}                             disabled={field.disabled}                             className={field.className}                             onChangePerInput={onChangePerInput}                           />                           {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                         </div>                       )                      case \"file\":                     case \"file-multiple\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           <label className=\"block text-sm font-medium\">                             {field.label}                           </label>                           <Input                             type=\"file\"                             name={String(field.name)}                             accept={field.accept}                             multiple={field.type === \"file-multiple\" || field.multiple}                             onChange={(e) => {                               const target = e.target as HTMLInputElement;                               const files = target.files;                               if (files) {                                 const fileArray = Array.from(files);                                 handleFileChange(String(field.name), fileArray);                               }                             }}                             placeholder={field.placeholder}                             disabled={field.disabled}                             className={field.className}                           />                           {Array.isArray(values[String(field.name)]) && values[String(field.name)].length > 0 && (                             <div className=\"text-sm text-muted-foreground\">                               {values[String(field.name)].length} file(s) selected                             </div>                           )}                            {/* Image Preview Section */}                           <ImagePreview                             images={[                               ...asFileArray(values[field.name]),                               ...asStringArray(initialValues[field.name])                             ]}                             onRemove={(index) => {                               const totalInitialUrls = asStringArray(initialValues[field.name]).length;                                if (index < totalInitialUrls) {                                 console.log(\"Mark remote image for deletion:\", asStringArray(initialValues[field.name])[index]);                               } else {                                 const fileIndex = index - totalInitialUrls;                                 const newFiles = uploadedFiles.filter((_, i) => i !== fileIndex);                                 setUploadedFiles(newFiles);                                 setFieldValue(String(field.name), newFiles);                               }                             }}                           />                            {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                         </div>                       );                      case \"textarea\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           <label className=\"block text-sm font-medium\">                             {field.label}                           </label>                           <Textarea                             name={field.name as string}                             value={values[String(field.name)]}                             onChange={(e) => handleChangeInput(e as any, field.type)}                             placeholder={field.placeholder}                             disabled={field.disabled}                             className={field.className}                           />                           {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                         </div>                       );                      case \"select\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           <label className=\"block text-sm font-medium\">                             {field.label}                           </label>                           <Select                             disabled={field.disabled}                             value={String(values[String(field.name)])}                             onValueChange={(val) => {                               let parsed: string | number = val;                               if (!isNaN(Number(val)) && val.trim() !== \"\") {                                 parsed = parseInt(val, 10);                               }                               const syntheticEvent = {                                 target: { name: field.name, value: parsed }                               };                               handleChangeInput(syntheticEvent as any, field.type);                             }}                           >                             <SelectTrigger>                               <SelectValue placeholder={field.placeholder || \"Select\"} />                             </SelectTrigger>                             <SelectContent>                               {field.options?.map((opt) => (                                 <SelectItem                                   key={String(opt.value)}                                   value={String(opt.value)}                                 >                                   {opt.label}                                 </SelectItem>                               ))}                             </SelectContent>                           </Select>                           {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                         </div>                       );                      case \"select-multiple\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           <label className=\"block text-sm font-medium\">{field.label}</label>                           <MultiSelect                             options={field.options as { label: string; value: string }[]}                             selected={values[String(field.name)] || []}                             onChange={(selected) => {                               setFieldValue(String(field.name), selected)                             }}                             disabled={field.disabled}                             placeholder={field.placeholder || \"Pilih...\"}                           />                           {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                         </div>                       )                      case \"input-group\":                       return (                         <div key={String(field.name)} className=\"space-y-1\">                           {field.label && (                             <label className=\"block text-sm font-medium\">{field.label}</label>                           )}                           <div className=\"flex gap-2\">                             {field.inputGroup?.map((opt) => (                               <div key={String(opt.name)} className=\"flex flex-col\">                                 <Input                                   type={opt.type}                                   name={String(opt.name)}                                   value={values[String(opt.name)] ?? \"\"}                                   onChange={(e) => handleChangeInput(e as any, opt.type)}                                   placeholder={opt.placeholder}                                   disabled={opt.disabled}                                   className={opt.className}                                 />                               </div>                             ))}                           </div>                         </div>                       );                     case \"checkbox\":                       return (                         <div key={String(field.name)} className=\"flex items-center gap-2\">                           <Field                             type=\"checkbox\"                             name={field.name as string}                             checked={values[String(field.name)] as unknown as boolean}                           />                           <label>{field.label}</label>                           {finalError && <p className=\"text-sm text-destructive\">{finalError}</p>}                         </div>                       );                      default:                       return null;                   }                 })}               </div>             ))}             {externalErrors?.submit && (               <p className=\"text-sm text-destructive\">{externalErrors.submit}</p>             )}             <div className=\"flex items-center gap-2\">               <button                 type=\"submit\"                 className=\"bg-primary cursor-pointer text-white px-4 py-2 rounded-md\"                 disabled={loading || isSubmitting}               >                 {isSubmitting || loading ? \"Saving...\" : (submitText ?? \"Save\")}               </button>               {onCancel && (                 <button                   type=\"button\"                   className=\"px-4 py-2 cursor-pointer rounded-md border\"                   onClick={onCancel}                   disabled={loading || isSubmitting}                 >                   {cancelText ?? \"Cancel\"}                 </button>               )}             </div>           </Form>         );       }}     </Formik>   ); }",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1072,
        5504
      ],
      "id": "d01e6269-f80f-4e0b-a3eb-b0658cb13687",
      "name": "Reusable Form2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "reusableTableContent",
              "value": "// src/components/shared/ReusableTable/ReusableTable.tsx import {   Table,   TableBody,   TableCell,   TableHead,   TableHeader,   TableRow, } from \"@/components/ui/table\"; import { Button } from \"@/components/ui/button\"; import { Card, CardContent, CardHeader } from \"@/components/ui/card\"; // --- Impor Pagination Components --- import {   Pagination,   PaginationContent,   PaginationEllipsis,   PaginationItem,   PaginationLink,   PaginationNext,   PaginationPrevious, } from \"@/components/ui/pagination\"; import type {   TableColumn,   TableAction,   ReusableTableProps, } from \"@/types/table\"; import { useState, useEffect } from \"react\"; // Tambahkan useState dan useEffect import { PaginationInitial } from \"@/types/page\";  const ReusableTable = <T extends { id: number }>({   data,   columns,   actions = [],   loading = false,   onRowClick,   emptyState,   className = \"\",   onClickGoToPage,   pagination = PaginationInitial,   itemsPerPage = 10, // --- Prop baru untuk jumlah item per halaman --- }: ReusableTableProps<T> & { itemsPerPage?: number }) => {   // --- Extend props type ---   // --- State untuk pagination ---   const [currentPage, setCurrentPage] = useState(pagination.page);    const totalPages = pagination.total_pages;   useEffect(() => {     if (currentPage > totalPages && totalPages > 0) {       setCurrentPage(totalPages);     } else if (totalPages === 0) {       setCurrentPage(1); // Reset ke halaman 1 jika tidak ada data     }   }, [data.length, totalPages, currentPage]);    // --- Hitung data untuk halaman saat ini ---   const startIndex = (currentPage - 1) * itemsPerPage;    // --- Handler untuk perubahan halaman ---   const goToPage = (page: number) => {     // Validasi input halaman     const newPage = Math.max(1, Math.min(page, totalPages));     if (newPage !== currentPage) {       onClickGoToPage && onClickGoToPage(newPage)       setCurrentPage(newPage);     }   };    // --- Handler untuk halaman berikutnya/sebelumnya ---   const nextPage = () => {     goToPage(currentPage + 1)   };   const prevPage = () => {     goToPage(currentPage - 1)   };    // --- Render skeleton loading ---   if (loading) {     return (       <Card className={className}>         <CardHeader>           <div className=\"h-6 bg-gray-200 rounded animate-pulse w-1/4\"></div>         </CardHeader>         <CardContent>           {[1, 2, 3].map((i) => (             <div               key={i}               className=\"h-12 bg-gray-100 rounded mb-2 animate-pulse\"             ></div>           ))}           {/* --- Skeleton untuk Pagination --- */}           <div className=\"flex items-center justify-between px-2 py-4\">             <div className=\"h-4 bg-gray-200 rounded w-32 animate-pulse\"></div>             <div className=\"flex space-x-2\">               {[1, 2, 3, 4].map((i) => (                 <div                   key={i}                   className=\"h-8 w-8 bg-gray-200 rounded animate-pulse\"                 ></div>               ))}             </div>             <div className=\"h-4 bg-gray-200 rounded w-32 animate-pulse\"></div>           </div>         </CardContent>       </Card>     );   }    // --- Render empty state ---   if (data.length === 0 && emptyState) {     return <div className={className}>{emptyState}</div>;   }    return (     <Card className={className}>       <CardContent className=\"p-0\">         <Table>           <TableHeader>             <TableRow>               <TableHead className=\"text-left\">No</TableHead>               {columns.map((column: TableColumn<T>, index: number) => (                 <TableHead key={index} className={column.className}>                   {column.header}                 </TableHead>               ))}               {actions.length > 0 && (                 <TableHead className=\"text-right\">Aksi</TableHead>               )}             </TableRow>           </TableHeader>           <TableBody>             {data.length > 0 ? (               data.map((item: T, index: number) => (                 <TableRow                   key={item.id}                   onClick={() => onRowClick?.(item)}                   className={                     onRowClick ? \"cursor-pointer hover:bg-gray-50\" : \"\"                   }                 >                   <TableCell>{startIndex + index + 1}</TableCell>                   {columns.map((column: TableColumn<T>, colIndex: number) => (                     <TableCell key={colIndex} className={column.className}>                       {typeof column.accessor === \"function\"                         ? column.accessor(item)                         : String(item[column.accessor as keyof T] ?? \"-\")}                     </TableCell>                   ))}                   {actions.length > 0 && (                     <TableCell className=\"text-right\">                       <div className=\"flex justify-end gap-2\">                         {actions.map(                           (action: TableAction<T>, actionIndex: number) => (                             <Button                               key={actionIndex}                               variant={action.variant || \"outline\"}                               size=\"sm\"                               onClick={(e) => {                                 e.stopPropagation();                                 action.onClick(item);                               }}                             >                               {action.icon}                               {action.label}                             </Button>                           )                         )}                       </div>                     </TableCell>                   )}                 </TableRow>               ))             ) : (               // --- Jika tidak ada data untuk halaman ini (seharusnya tidak terjadi karena pengecekan di useEffect) ---               <TableRow>                 <TableCell                   colSpan={columns.length + (actions.length > 0 ? 1 : 0)}                   className=\"text-center py-8 text-gray-500\"                 >                   No data available for this page.                 </TableCell>               </TableRow>             )}           </TableBody>         </Table>          {/* --- Render pesan jika data kosong (sebelum pagination) --- */}         {data.length === 0 && !emptyState && (           <div className=\"p-8 text-center text-gray-500\">No data available</div>         )}          {/* --- Render Pagination jika ada lebih dari 1 halaman --- */}         {totalPages > 1 && (           <div className=\"border-t px-4 py-3 flex items-center justify-between\">             <div className=\"text-sm text-muted-foreground\">               Menampilkan <span className=\"font-medium\">{startIndex + 1}</span>{\" \"}               sampai {\"\"}               <span className=\"font-medium\">                 {data.length + startIndex}               </span>{\" \"}               {\"\"}               dari <span className=\"font-medium\">{pagination.total_items}</span> entri             </div>             <Pagination>               <PaginationContent>                 <PaginationItem>                   <PaginationPrevious                     href=\"#\"                     onClick={(e) => {                       e.preventDefault();                       if (currentPage > 1) prevPage();                     }}                     aria-disabled={currentPage === 1}                     className={                       currentPage === 1 ? \"pointer-events-none opacity-50\" : \"\"                     }                   />                 </PaginationItem>                  {/* --- Logika sederhana untuk menampilkan nomor halaman --- */}                 {/* Tampilkan halaman 1 */}                 <PaginationItem>                   <PaginationLink                     href=\"#\"                     onClick={(e) => {                       e.preventDefault();                       goToPage(1);                     }}                     isActive={currentPage === 1}                   >                     1                   </PaginationLink>                 </PaginationItem>                  {/* Ellipsis jika halaman saat ini > 3 */}                 {currentPage > 3 && (                   <PaginationItem>                     <PaginationEllipsis />                   </PaginationItem>                 )}                  {/* Halaman sebelum saat ini */}                 {currentPage > 2 && (                   <PaginationItem>                     <PaginationLink                       href=\"#\"                       onClick={(e) => {                         e.preventDefault();                         goToPage(currentPage - 1);                       }}                     >                       {currentPage - 1}                     </PaginationLink>                   </PaginationItem>                 )}                  {/* Halaman saat ini (jika bukan 1 atau terakhir) */}                 {currentPage !== 1 && currentPage !== totalPages && (                   <PaginationItem>                     <PaginationLink                       href=\"#\"                       onClick={(e) => {                         e.preventDefault();                         // Tidak perlu aksi, ini adalah halaman saat ini                       }}                       isActive                     >                       {currentPage}                     </PaginationLink>                   </PaginationItem>                 )}                  {/* Halaman setelah saat ini */}                 {currentPage < totalPages - 1 && (                   <PaginationItem>                     <PaginationLink                       href=\"#\"                       onClick={(e) => {                         e.preventDefault();                         goToPage(currentPage + 1);                       }}                     >                       {currentPage + 1}                     </PaginationLink>                   </PaginationItem>                 )}                  {/* Ellipsis jika halaman saat ini < totalPages - 2 */}                 {currentPage < totalPages - 2 && (                   <PaginationItem>                     <PaginationEllipsis />                   </PaginationItem>                 )}                  {/* Tampilkan halaman terakhir jika totalPages > 1 */}                 {totalPages > 1 && (                   <PaginationItem>                     <PaginationLink                       href=\"#\"                       onClick={(e) => {                         e.preventDefault();                         goToPage(totalPages);                       }}                       isActive={currentPage === totalPages}                     >                       {totalPages}                     </PaginationLink>                   </PaginationItem>                 )}                  <PaginationItem>                   <PaginationNext                     href=\"#\"                     onClick={(e) => {                       e.preventDefault();                       if (currentPage < totalPages) nextPage();                     }}                     aria-disabled={currentPage === totalPages}                     className={                       currentPage === totalPages                         ? \"pointer-events-none opacity-50\"                         : \"\"                     }                   />                 </PaginationItem>               </PaginationContent>             </Pagination>           </div>         )}       </CardContent>     </Card>   ); };  export default ReusableTable;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1072,
        5712
      ],
      "id": "502d9715-a614-43ae-be09-0b2f7e2a30a8",
      "name": "Reusable Table2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "reusableAlertContent",
              "value": "import { useEffect } from \"react\"; import { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"; import { CheckCircle2Icon, XCircleIcon } from \"lucide-react\";  type AlertType = \"success\" | \"error\";  interface ReusableAlertProps {   type: AlertType;   title: string;   description: string;   duration?: number; // default 2000 ms   onClose: () => void; }  export default function ReusableAlert({   type,   title,   description,   duration = 3000,   onClose, }: ReusableAlertProps) {   // Auto close setelah duration   useEffect(() => {     const timer = setTimeout(() => {       onClose();     }, duration);     return () => clearTimeout(timer);   }, [duration, onClose]);    return (     <div className=\"fixed top-4 right-4 w-96 z-50 animate-in fade-in duration-300\">       <Alert         className={`flex items-center ${type === \"success\" ? \"bg-green-100\" : \"bg-red-100\"           }`}       >         {type === \"success\" ? (           <CheckCircle2Icon color=\"#00c950\" />         ) : (           <XCircleIcon color=\"#fb2c36\" />         )}         <div>           <AlertTitle             className={`${type === \"success\" ? \"text-green-500\" : \"text-red-500\"               }`}           >             {title}           </AlertTitle>           <AlertDescription>{description}</AlertDescription>         </div>       </Alert>     </div>   ); }",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1072,
        5936
      ],
      "id": "fef722c8-78fa-411c-92be-51e14476af24",
      "name": "Reusable Alert2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5f1e5730-121c-40f3-bde4-56d96dc15d4a",
              "name": "reusableModalContent",
              "value": "import {   Dialog,   DialogContent,   DialogHeader,   DialogTitle,   DialogDescription,   DialogFooter,   DialogClose, } from \"@/components/ui/dialog\"; import { Button } from \"@/components/ui/button\"; import { AlertTriangle, CheckCircle, Info } from \"lucide-react\"; import { cn } from \"@/lib/utils\";  // Tipe untuk modal variant export type ModalVariant =   | \"default\"   | \"confirm\"   | \"delete\"   | \"success\"   | \"warning\"   | \"info\";  // Props untuk ReusableModal export interface ReusableModalProps {   isOpen: boolean;   title: string;   description?: string;   children: React.ReactNode;   onConfirm?: () => void;   onCancel?: () => void;   confirmText?: string;   cancelText?: string;   variant?: ModalVariant;   isLoading?: boolean;   showCloseButton?: boolean;   className?: string; }  const ReusableModal = ({   isOpen,   title,   description,   children,   onConfirm,   onCancel,   confirmText = \"Confirm\",   cancelText = \"Cancel\",   variant = \"default\",   isLoading = false,   showCloseButton = true,   className = \"\", }: ReusableModalProps) => {   // Dapatkan konfigurasi berdasarkan variant   const getVariantConfig = () => {     const configs = {       default: {         icon: null,         confirmVariant: \"default\" as const,         titleClass: \"\",       },       confirm: {         icon: <CheckCircle className=\"h-5 w-5 text-green-500\" />,         confirmVariant: \"default\" as const,         titleClass: \"\",       },       delete: {         icon: <AlertTriangle className=\"h-5 w-5 text-red-500\" />,         confirmVariant: \"destructive\" as const,         titleClass: \"text-red-500\",       },       success: {         icon: <CheckCircle className=\"h-5 w-5 text-green-500\" />,         confirmVariant: \"default\" as const,         titleClass: \"text-green-500\",       },       warning: {         icon: <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />,         confirmVariant: \"default\" as const,         titleClass: \"text-yellow-500\",       },       info: {         icon: <Info className=\"h-5 w-5 text-blue-500\" />,         confirmVariant: \"default\" as const,         titleClass: \"text-blue-500\",       },     };      return configs[variant];   };    const config = getVariantConfig();    return (     <Dialog       open={isOpen}       onOpenChange={(open) => {         if (!open && onCancel) {           onCancel();         }       }}     >       <DialogContent className={cn(\"sm:max-w-[425px]\", className)}>         {/* Header dengan icon dan close button */}         <DialogHeader className=\"relative\">           <div className=\"flex items-center gap-3\">             {config.icon && <div className=\"flex-shrink-0\">{config.icon}</div>}             <div>               <DialogTitle className={cn(config.titleClass)}>                 {title}               </DialogTitle>               {description && (                 <DialogDescription>{description}</DialogDescription>               )}             </div>           </div>            {showCloseButton && (             <DialogClose               onClick={onCancel}               className=\"absolute right-0 top-0 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"             >               <span className=\"sr-only\">Close</span>             </DialogClose>           )}         </DialogHeader>          {/* Konten modal */}         <div className=\"py-4\">{children}</div>          {/* Footer dengan tombol aksi */}         {(onConfirm || onCancel) && (           <DialogFooter className=\"gap-2\">             {onCancel && (               <Button variant=\"outline\" onClick={onCancel} disabled={isLoading}>                 {cancelText}               </Button>             )}             {onConfirm && (               <Button                 variant={config.confirmVariant}                 onClick={onConfirm}                 disabled={isLoading}               >                 {isLoading ? \"Processing...\" : confirmText}               </Button>             )}           </DialogFooter>         )}       </DialogContent>     </Dialog>   ); };  export default ReusableModal;",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1072,
        6144
      ],
      "id": "39a4e157-ac8b-4562-847d-6376c444afdd",
      "name": "Reusable Modal2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1504,
        5504
      ],
      "id": "bbeb81db-08de-4f20-b96b-334856a1c653",
      "name": "Merge Component10"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1504,
        5712
      ],
      "id": "2a085f15-9801-4d50-b670-83a3c31310b7",
      "name": "Merge Component11"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1504,
        5936
      ],
      "id": "8e5aa8fa-74ab-4ceb-a1f7-ed138818097f",
      "name": "Merge Component12"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1504,
        6144
      ],
      "id": "c1dc33c9-0334-437d-9b35-fbed004f7ff0",
      "name": "Merge Component13"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2672,
        5104
      ],
      "id": "2c29a7f7-2e4b-4669-b309-fa4d4f5647b0",
      "name": "Merge16"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "var schemaContent = $json.schemaContent\nvar formContent = $json.formContent\nvar listContent = $json.listContent\nvar detailContent = $json.detailContent\nvar actionContent = $json.actionContent\nvar typeContent = $json.typeContent\nvar reusableFormContent = $json.ReuseblaFormContent\nvar reusableTableContent = $json.reusableTableContent\nvar reusableAlertContent = $json.reusableAlertContent\nvar reusableModalContent = $json.reusableModalContent\n\n\nconst systemMessage = `\nYou are an AI Assistant designed specifically to help developers with coding, architecture suggestions, debugging, and providing clear technical explanations. You may also engage in casual conversation.\n\n## Behavior Rules\n\n### 1. For General Coding Questions\nIf the user asks for:\n- Explanations (e.g., \"What is useEffect?\")\n- Debugging help (e.g., \"Why is my code crashing?\")\n- Code reviews, optimization, or best practices\n- Any non-generation request\n\n→ Respond **normally**, in a helpful, conversational tone.\n→ Use markdown if needed (code blocks, lists, etc.).\n→ **Do NOT use [writeFileVico] format.**\n→ Provide clear, accurate, and beginner-friendly explanations when appropriate.\n\n---\n\n### 2. For Model or Page Generation Requests\nIf the user explicitly asks to:\n- \"Generate a model\"\n- \"Generate a page\"\n- \"Create a page\"\n- \"Build CRUD for X\"\n- \"Make a form for user\"\n\n→ First, **check if the schema or requirements are complete**:\n   - Are all fields defined?\n   - Are types, validations, relationships clear?\n   - If not, **ask the user to clarify**.\n   - Do not generate anything until complete.\n\n→ If complete, respond **only** with the structured block:\n\n[writeFileVico]\nname: <folder_name_in_snake_case>\nschema: <filename.schema.ts>\n\\`\\`\\`ts\n${schemaContent}\n\\`\\`\\`\n\nform: <ComponentNameForm.tsx>\n\\`\\`\\`tsx\n${formContent}\n\\`\\`\\`\n\ntable: <ComponentNameList.tsx>\n\\`\\`\\`tsx\n${listContent}\n\\`\\`\\`\n\ndetail: <ComponentNameDetailView.tsx>\n\\`\\`\\`tsx\n${detailContent}\n\\`\\`\\`\n\naction: <filename.action.ts>\n\\`\\`\\`ts\n${actionContent}\n\\`\\`\\`\n\ntype: <filename.ts>\n\\`\\`\\`ts\n${typeContent}\n\\`\\`\\`\n\n⚠️ Rules for this format:\n- Only use this block **after schema is confirmed complete**.\n- Do not add any text before or after the block.\n- Never generate code manually — placeholders like \\`${schemaContent}\\` will be filled by the system.\n- Keep the order: name → schema → form → table → detail → action → type.\n- Use triple backticks with language tags: \\`\\`\\`ts or \\`\\`\\`tsx.\n\nthis is components U should training and not to be generate, because it already exists on code base:\nReusableAlert.tsx:\n\\`\\`\\`ts\n${reusableAlertContent}\n\\`\\`\\`\n\nReusableForm.tsx:\n\\`\\`\\`ts\n${reusableFormContent}\n\\`\\`\\`\n\nReusableTable.tsx:\n\\`\\`\\`ts\n${reusableTableContent}\n\\`\\`\\`\n\nReusableModal.tsx:\n\\`\\`\\`ts\n${reusableModalContent}\n\\`\\`\\`\n\n---\n\n## Summary\n- ✅ For general help: answer naturally.\n- ✅ For generation: \n   - Use strict [writeFileVico] format only when schema is confirmed complete.\n   - If the project clearly uses React + Vite, follow the provided template components.\n   - If the workspace does NOT use React + Vite (or looks different), IGNORE the template and use the user's own workspace structure as reference.\n- ❌ Never force [writeFileVico] on non-generation requests.\n- ❌ Never generate incomplete or guessed code.\n\nYour flexibility makes you a powerful assistant for both learning and automation.\n`;\n\nvar data = {\n  systemMessage\n}\n\nreturn data"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2384,
        5072
      ],
      "id": "11f2e7ff-489e-4e9e-ae11-c2972e24d29c",
      "name": "System Message2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "176b32ab-5005-4302-a649-b2d0c9072784",
              "name": "userId",
              "value": "={{ $json.body.userId }}",
              "type": "string"
            },
            {
              "id": "7b4a70c6-0552-4bba-bf0b-1a8e119c9663",
              "name": "token",
              "value": "={{ $json.body.token }}",
              "type": "string"
            },
            {
              "id": "f2a33904-3d9a-4d0e-9e50-ace2e0e14f35",
              "name": "message",
              "value": "={{ $json.body.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        224,
        2640
      ],
      "id": "7b2d8f45-54d4-4406-a4c3-918d7a7827c9",
      "name": "Edit Fields3"
    }
  ],
  "pinData": {},
  "connections": {
    "login": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "schema",
            "type": "main",
            "index": 0
          },
          {
            "node": "action",
            "type": "main",
            "index": 0
          },
          {
            "node": "form",
            "type": "main",
            "index": 0
          },
          {
            "node": "list",
            "type": "main",
            "index": 0
          },
          {
            "node": "detail",
            "type": "main",
            "index": 0
          },
          {
            "node": "type1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Reusable Form",
            "type": "main",
            "index": 0
          },
          {
            "node": "Reusable Table",
            "type": "main",
            "index": 0
          },
          {
            "node": "Reusable Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "Reusable Modal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Save system message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "history": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send message": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Get chat Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "Get chat Memory",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Chat Memory Manager2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory3": {
      "ai_memory": [
        [
          {
            "node": "Save system message",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "OpenAI Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory4": {
      "ai_memory": [
        [
          {
            "node": "Save Chat",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Save Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        []
      ]
    },
    "Get chat Memory": {
      "main": [
        [
          {
            "node": "schema1",
            "type": "main",
            "index": 0
          },
          {
            "node": "action1",
            "type": "main",
            "index": 0
          },
          {
            "node": "form1",
            "type": "main",
            "index": 0
          },
          {
            "node": "list1",
            "type": "main",
            "index": 0
          },
          {
            "node": "detail1",
            "type": "main",
            "index": 0
          },
          {
            "node": "type",
            "type": "main",
            "index": 0
          },
          {
            "node": "Reusable Form1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Reusable Table1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Reusable Alert1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Reusable Modal1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Chat": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save system message": {
      "main": [
        [
          {
            "node": "Code13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory Manager": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        []
      ]
    },
    "Edit Fields6": {
      "main": [
        [
          {
            "node": "schema2",
            "type": "main",
            "index": 0
          },
          {
            "node": "action2",
            "type": "main",
            "index": 0
          },
          {
            "node": "form2",
            "type": "main",
            "index": 0
          },
          {
            "node": "list2",
            "type": "main",
            "index": 0
          },
          {
            "node": "detail2",
            "type": "main",
            "index": 0
          },
          {
            "node": "type2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Reusable Form2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Reusable Table2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Reusable Alert2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Reusable Modal2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Get chat Memory1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code7": {
      "main": [
        [
          {
            "node": "OpenAI Chat1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat1": {
      "main": [
        [
          {
            "node": "Edit Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Completions": {
      "main": [
        [
          {
            "node": "Edit Fields6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "schema": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "action": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "form": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "list": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "detail": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Merge Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "System Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge8",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "type1": {
      "main": [
        [
          {
            "node": "Merge Type",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Type": {
      "main": [
        [
          {
            "node": "Merge Component",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reusable Form": {
      "main": [
        [
          {
            "node": "Merge Component",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Component": {
      "main": [
        [
          {
            "node": "Merge Component1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reusable Table": {
      "main": [
        [
          {
            "node": "Merge Component1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Component1": {
      "main": [
        [
          {
            "node": "Merge Component2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reusable Alert": {
      "main": [
        [
          {
            "node": "Merge Component2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Component2": {
      "main": [
        [
          {
            "node": "Merge Component3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reusable Modal": {
      "main": [
        [
          {
            "node": "Merge Component3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Component3": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge8": {
      "main": [
        [
          {
            "node": "Merge10",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "System Message": {
      "main": [
        [
          {
            "node": "Merge8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "schema1": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "action1": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "form1": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "list1": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "detail1": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge6": {
      "main": [
        [
          {
            "node": "Merge Type1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge7": {
      "main": [
        [
          {
            "node": "System Message1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge9",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "type": {
      "main": [
        [
          {
            "node": "Merge Type1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Type1": {
      "main": [
        [
          {
            "node": "Merge Component4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reusable Form1": {
      "main": [
        [
          {
            "node": "Merge Component4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Reusable Table1": {
      "main": [
        [
          {
            "node": "Merge Component5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Reusable Alert1": {
      "main": [
        [
          {
            "node": "Merge Component6",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Reusable Modal1": {
      "main": [
        [
          {
            "node": "Merge Component7",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Component4": {
      "main": [
        [
          {
            "node": "Merge Component5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Component5": {
      "main": [
        [
          {
            "node": "Merge Component6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Component6": {
      "main": [
        [
          {
            "node": "Merge Component7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Component7": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "System Message1": {
      "main": [
        [
          {
            "node": "Merge9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge9": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields8": {
      "main": [
        [
          {
            "node": "Code11",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Component8",
            "type": "main",
            "index": 1
          },
          {
            "node": "Merge Component9",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Update Workspaces": {
      "main": [
        [
          {
            "node": "Edit Fields8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory5": {
      "ai_memory": [
        [
          {
            "node": "Save Chat1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields10": {
      "main": [
        [
          {
            "node": "Save Chat1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Chat1": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "Chat Memory Manager1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory6": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory Manager1": {
      "main": [
        [
          {
            "node": "Merge10",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge10": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "Merge11",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge11": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code11": {
      "main": [
        [
          {
            "node": "OpenAI Chat2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat2": {
      "main": [
        [
          {
            "node": "Merge Component9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Component8": {
      "main": [
        [
          {
            "node": "Edit Fields10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "System Message3": {
      "main": [
        [
          {
            "node": "Merge Component8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Component9": {
      "main": [
        [
          {
            "node": "System Message3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "Edit Fields11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code13": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory7": {
      "ai_memory": [
        [
          {
            "node": "Get chat Memory1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Get chat Memory1": {
      "main": [
        [
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "schema2": {
      "main": [
        [
          {
            "node": "Merge12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge12": {
      "main": [
        [
          {
            "node": "Merge15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge13": {
      "main": [
        [
          {
            "node": "Merge14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "action2": {
      "main": [
        [
          {
            "node": "Merge12",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "form2": {
      "main": [
        [
          {
            "node": "Merge13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "list2": {
      "main": [
        [
          {
            "node": "Merge13",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "detail2": {
      "main": [
        [
          {
            "node": "Merge14",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge14": {
      "main": [
        [
          {
            "node": "Merge Type2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge15": {
      "main": [
        [
          {
            "node": "System Message2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge16",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "type2": {
      "main": [
        [
          {
            "node": "Merge Type2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Type2": {
      "main": [
        [
          {
            "node": "Merge Component10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reusable Form2": {
      "main": [
        [
          {
            "node": "Merge Component10",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Reusable Table2": {
      "main": [
        [
          {
            "node": "Merge Component11",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Reusable Alert2": {
      "main": [
        [
          {
            "node": "Merge Component12",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Reusable Modal2": {
      "main": [
        [
          {
            "node": "Merge Component13",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Component10": {
      "main": [
        [
          {
            "node": "Merge Component11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Component11": {
      "main": [
        [
          {
            "node": "Merge Component12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Component12": {
      "main": [
        [
          {
            "node": "Merge Component13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Component13": {
      "main": [
        [
          {
            "node": "Merge15",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "System Message2": {
      "main": [
        [
          {
            "node": "Merge16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge16": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "44475208-f56a-4492-b51a-61ea3ff409c7",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e970340f9145c882432efeb13652cea8a93675f1e016e602b85e2aa1202a1753"
  },
  "id": "IeFfYy6Wn9qDWKYD",
  "tags": []
}
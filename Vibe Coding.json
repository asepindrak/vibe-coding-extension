{
  "name": "Vibe Coding",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "85c0cd1c-a724-48bd-aec0-55d08d687309",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "beeaefdb-7a4a-46dc-b09c-f5573121765a",
      "name": "login",
      "webhookId": "85c0cd1c-a724-48bd-aec0-55d08d687309"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "176b32ab-5005-4302-a649-b2d0c9072784",
              "name": "email",
              "value": "={{ $json.body.email }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        224,
        0
      ],
      "id": "5b251a10-89f4-4723-963c-2272328370c2",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "var userId = $input.first().json.email\nvar token = Date.now()\nvar sessionId = token\nvar systemMessage = `You are an AI Assistant designed specifically to help developers with coding, architecture suggestions, debugging, and providing clear technical explanations. You may also engage in casual conversation with the user, but if the user does not ask for code, do not provide code.\n\nMain objectives:\n\nProvide relevant answers according to the programming language, framework, or tools the user is working with.\n\nDeliver solutions that are practical, efficient, and production-ready.\n\nExplain concepts in simple yet technical language.\n\nProvide code examples that are clean, modular, and follow best practices.\n\nIf there are multiple solution options, give a short comparison of pros and cons.\n\nIf the user does not mention the language/framework context, ask for clarification before giving a solution.\n\nAlways prioritize security, performance, and maintainability in your answers.\n\nDon’t just provide code—guide the user on how to integrate it into their existing architecture.\n\nIf there is an error from the user, help analyze the error message, possible causes, and how to fix it.\n\nDo not provide incorrect information or unclear assumptions. If unsure, ask the user for more details.\n\nAnswer format:\n\nUse a structured format (points/steps) to make answers easier to understand.\n\nIf code is included, provide it with syntax highlighting.\n\nAdd small notes for important details regarding dependencies, environment, or compatibility.\n\nYou are not just a code generator—you are a technical partner who helps design architecture, recommend best practices, and ensure the user can understand and further develop their system effectively.\n`\nvar data = {\n  userId,\n  token,\n  sessionId,\n  systemMessage\n}\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        0
      ],
      "id": "2e457cad-9662-47d6-8932-374be76a3015",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "11b612ae-a892-434b-91d7-4158b022f147",
              "name": "userId",
              "value": "={{ $('Code').item.json.userId }}",
              "type": "string"
            },
            {
              "id": "8bce3a28-30eb-4c30-a90e-6525a1357a11",
              "name": "token",
              "value": "={{ $('Code').item.json.token }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1184,
        0
      ],
      "id": "3aadcc8b-6831-43a5-8572-069aa6e41f74",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "176b32ab-5005-4302-a649-b2d0c9072784",
              "name": "userId",
              "value": "={{ $json.query.userId }}",
              "type": "string"
            },
            {
              "id": "7b4a70c6-0552-4bba-bf0b-1a8e119c9663",
              "name": "token",
              "value": "={{ $json.query.token }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        224,
        432
      ],
      "id": "c5035ded-568d-42f3-87ed-1db88ac03ab9",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "jsCode": "var userId = $input.first().json.userId\nvar sessionId = $input.first().json.token\nvar data = {\n  userId,\n  sessionId\n}\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        432
      ],
      "id": "6a777639-465d-40be-95c6-0dcd635a6ef4",
      "name": "Code1"
    },
    {
      "parameters": {
        "path": "6860e42b-4f8d-40e4-98dc-3b46a1303db7",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        432
      ],
      "id": "43345a49-b1db-47cf-831f-9d0467a276fd",
      "name": "history",
      "webhookId": "6860e42b-4f8d-40e4-98dc-3b46a1303db7"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "50c94bd4-9ef1-4dbe-ac03-dda6fd966797",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        832
      ],
      "id": "89ad6e0a-1d41-47ec-88e3-abe69d3ad5c5",
      "name": "send message",
      "webhookId": "50c94bd4-9ef1-4dbe-ac03-dda6fd966797"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "176b32ab-5005-4302-a649-b2d0c9072784",
              "name": "userId",
              "value": "={{ $json.body.userId }}",
              "type": "string"
            },
            {
              "id": "7b4a70c6-0552-4bba-bf0b-1a8e119c9663",
              "name": "token",
              "value": "={{ $json.body.token }}",
              "type": "string"
            },
            {
              "id": "f2a33904-3d9a-4d0e-9e50-ace2e0e14f35",
              "name": "message",
              "value": "={{ $json.body.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        224,
        832
      ],
      "id": "7b2d8f45-54d4-4406-a4c3-918d7a7827c9",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "jsCode": "var userId = $input.first().json.userId\nvar sessionId = $input.first().json.token\nvar Message = $input.first().json.message\nvar data = {\n  userId,\n  sessionId,\n  Message\n}\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        832
      ],
      "id": "b8c90638-c2fe-47db-97c1-7a7375caf541",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "var sessionId = $('Code2').first().json.sessionId\nvar userId = $('Code2').first().json.userId\n\nvar messages = $input.first().json.messages\nvar data = {\n  userId,\n  sessionId,\n  messages\n}\n\nif (messages.length > 20) {\n  messages = messages.slice(-20);\n\n  var systemMessage = `You are an AI Assistant designed specifically to help developers with coding, architecture suggestions, debugging, and providing clear technical explanations. You may also engage in casual conversation with the user, but if the user does not ask for code, do not provide code.\n\nMain objectives:\n\nProvide relevant answers according to the programming language, framework, or tools the user is working with.\n\nDeliver solutions that are practical, efficient, and production-ready.\n\nExplain concepts in simple yet technical language.\n\nProvide code examples that are clean, modular, and follow best practices.\n\nIf there are multiple solution options, give a short comparison of pros and cons.\n\nIf the user does not mention the language/framework context, ask for clarification before giving a solution.\n\nAlways prioritize security, performance, and maintainability in your answers.\n\nDon’t just provide code—guide the user on how to integrate it into their existing architecture.\n\nIf there is an error from the user, help analyze the error message, possible causes, and how to fix it.\n\nDo not provide incorrect information or unclear assumptions. If unsure, ask the user for more details.\n\nAnswer format:\n\nUse a structured format (points/steps) to make answers easier to understand.\n\nIf code is included, provide it with syntax highlighting.\n\nAdd small notes for important details regarding dependencies, environment, or compatibility.\n\nYou are not just a code generator—you are a technical partner who helps design architecture, recommend best practices, and ensure the user can understand and further develop their system effectively.\n`\n  \n  messages.push({ role: \"system\", content: systemMessage });\n\n  \n}\n\n\nvar newMessages = []\nmessages.forEach((item)=>{\n  if(item.system){\n    newMessages.push({\n      role:\"system\",\n      content: item.system\n    })\n  } \n  if(item.human){\n    newMessages.push({\n      role:\"user\",\n      content: item.human\n    })\n  }\n  if(item.ai){\n    newMessages.push({\n      role:\"assistant\",\n      content: item.ai\n    })\n  }\n})\n\n\n\nnewMessages.push({ role: \"user\", content: $('send message').first().json.body.message });\n\ndata.messages = messages\nvar data = {\n  data,\n  openai: { \n    json: {\n      model: \"gpt-4o-mini\",\n      messages: newMessages,\n      max_tokens: 5000  // misal 100 token (sekitar 70–80 kata)\n    }\n  }\n}\n\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        832
      ],
      "id": "954ebf6e-1c8b-4f7b-bdac-24d74f3ae248",
      "name": "Code3"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        784,
        1040
      ],
      "id": "6f5b424b-10a1-49c6-8b6a-1e7e64cc1872",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "mode": "delete",
        "deleteMode": "all"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        480,
        1552
      ],
      "id": "d1c504dc-5a35-409e-98a8-d46caeebe9bf",
      "name": "Chat Memory Manager2"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        560,
        1824
      ],
      "id": "51ba4504-2dcf-4af5-85c5-8a17ae34babe",
      "name": "Simple Memory2"
    },
    {
      "parameters": {
        "jsCode": "var sessionId = \"1756153946396\"\nvar data = {\n  sessionId\n}\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        1552
      ],
      "id": "b8c97d07-2dba-4720-a815-bd889d71c687",
      "name": "Code4"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        32,
        1552
      ],
      "id": "e31af50c-613c-44bb-a777-97420dbeb165",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        800,
        224
      ],
      "id": "52a187ec-b547-474d-a0fa-1317c9649a3a",
      "name": "Simple Memory3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.openai.json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1264,
        832
      ],
      "id": "81e99152-2109-49b7-b80e-6c4148f1752d",
      "name": "OpenAI Chat",
      "credentials": {
        "openAiApi": {
          "id": "3fZqwOF47IelEJ1h",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "68bf801d-5258-442e-bd46-2a3d2036dc11",
              "name": "message",
              "value": "={{ $('OpenAI Chat').item.json.choices[0].message.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2688,
        832
      ],
      "id": "4ea948f6-b099-43a8-b788-e467f7187048",
      "name": "Edit Fields4"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        752,
        640
      ],
      "id": "890b0f59-79ea-4500-a549-9de9d6e34745",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        672,
        432
      ],
      "id": "b48a9b01-d8be-4e31-8b75-dd5079770055",
      "name": "Chat Memory Manager"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        2000,
        1040
      ],
      "id": "87fa391b-5d31-4ebb-a36b-f07df5671d72",
      "name": "Simple Memory4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a91594e7-8476-487d-81f1-1e0f0dba72ee",
              "name": "sessionId",
              "value": "={{ $('Code2').item.json.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1680,
        832
      ],
      "id": "2baf6860-5fe8-46a5-9c29-107556a8fc20",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        688,
        832
      ],
      "id": "c2c3aba0-e725-4b0d-92b6-92ce1f7ce6d1",
      "name": "Get chat Memory"
    },
    {
      "parameters": {
        "mode": "insert",
        "messages": {
          "messageValues": [
            {
              "type": "user",
              "message": "={{ $('send message').item.json.body.message }}"
            },
            {
              "type": "ai",
              "message": "={{ $('OpenAI Chat').item.json.choices[0].message.content }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        2112,
        832
      ],
      "id": "2828a867-27c4-4136-bfe3-093110acc7ba",
      "name": "Save Chat"
    },
    {
      "parameters": {
        "mode": "insert",
        "messages": {
          "messageValues": [
            {
              "message": "={{ $json.systemMessage }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        720,
        0
      ],
      "id": "afe61ddb-c226-4066-a4d4-9e2437d1d239",
      "name": "Save system message"
    },
    {
      "parameters": {
        "jsCode": "\nvar messages = $input.first().json.messages\n\nif (messages.length > 20) {\n  messages = messages.slice(-20);\n}\n\nvar newMessages = []\nmessages.forEach((item)=>{\n  if(item.system){\n    newMessages.push({\n      role:\"system\",\n      message: item.system\n    })\n  } \n  if(item.human){\n    newMessages.push({\n      role:\"user\",\n      message: item.human\n    })\n  }\n  if(item.ai){\n    newMessages.push({\n      role:\"assistant\",\n      message: item.ai\n    })\n  }\n})\n\n\nvar data = {\n  messages:newMessages\n}\n\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1056,
        432
      ],
      "id": "37b44117-92d3-4a93-8316-80190d1961df",
      "name": "Code5"
    }
  ],
  "pinData": {},
  "connections": {
    "login": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Save system message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "history": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send message": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Get chat Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "Get chat Memory",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Chat Memory Manager2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory3": {
      "ai_memory": [
        [
          {
            "node": "Save system message",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "OpenAI Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory4": {
      "ai_memory": [
        [
          {
            "node": "Save Chat",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Save Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        []
      ]
    },
    "Get chat Memory": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Chat": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save system message": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory Manager": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b9f6cad7-9fe4-4b90-a31d-46343b129bed",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "e970340f9145c882432efeb13652cea8a93675f1e016e602b85e2aa1202a1753"
  },
  "id": "IeFfYy6Wn9qDWKYD",
  "tags": []
}